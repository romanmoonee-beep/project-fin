import { createConversation } from '@grammyjs/conversations';
import { InlineKeyboard } from 'grammy';
import { taskService } from '../services/taskService';
import { balanceService } from '../services/balanceService';
import { userService } from '../services/userService';
import { isAdmin } from '../config';
import type { BotContext } from '../types/context';

// Moderate task conversation
export const moderateTaskConversation = createConversation('moderateTask', async (conversation, ctx: BotContext) => {
  const { executionId } = ctx.session.data || {};
  
  if (!executionId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const execution = await taskService.getExecutionDetails(executionId);
    
    if (!execution) {
      await ctx.reply('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    if (execution.status !== 'pending') {
      await ctx.reply('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      return;
    }

    const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
    
    let moderationText = `
üîç <b>–ú–û–î–ï–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> ${execution.task.title}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userInfo}
üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${getLevelEmoji(execution.user.level)} ${execution.user.level}
üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${execution.rewardAmount} GRAM
‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> ${formatDateTime(execution.createdAt)}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>
${execution.task.description}

${execution.task.targetUrl ? `üîó <b>–°—Å—ã–ª–∫–∞:</b> ${execution.task.targetUrl}` : ''}
`;

    if (execution.screenshotUrls && execution.screenshotUrls.length > 0) {
      moderationText += `\nüì∏ <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã:</b> ${execution.screenshotUrls.length}`;
    }

    if (execution.proofData && execution.proofData.description) {
      moderationText += `\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n${execution.proofData.description}`;
    }

    const moderationKeyboard = new InlineKeyboard()
      .text('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'approve')
      .text('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'reject').row()
      .text('üí∞ –û–¥–æ–±—Ä–∏—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—É–º–º—ã', 'approve_custom')
      .text('‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å', 'postpone').row()
      .text('üìã –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'user_details')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

    await ctx.reply(moderationText, { 
      reply_markup: moderationKeyboard,
      parse_mode: 'HTML'
    });

    // Show screenshots if available
    if (execution.screenshotUrls && execution.screenshotUrls.length > 0) {
      for (const screenshotUrl of execution.screenshotUrls.slice(0, 3)) { // Show up to 3 screenshots
        try {
          await ctx.replyWithPhoto(screenshotUrl, {
            caption: 'üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
          });
        } catch (error) {
          console.error('Error sending screenshot:', error);
          await ctx.reply(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: ${screenshotUrl}`);
        }
      }
    }

    const decision = await conversation.waitForCallbackQuery();
    
    switch (decision.data) {
      case 'approve':
        await handleApproval(conversation, ctx, execution, null);
        break;
      case 'reject':
        await handleRejection(conversation, ctx, execution);
        break;
      case 'approve_custom':
        await handleCustomApproval(conversation, ctx, execution);
        break;
      case 'postpone':
        await handlePostpone(conversation, ctx, execution);
        break;
      case 'user_details':
        await showUserDetails(conversation, ctx, execution.user);
        break;
      case 'cancel':
        await decision.answerCallbackQuery('‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        return;
      default:
        await decision.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
        return;
    }

  } catch (error) {
    console.error('Moderation conversation error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// Handle approval
async function handleApproval(conversation: any, ctx: BotContext, execution: any, customAmount?: number) {
  try {
    const finalAmount = customAmount || execution.rewardAmount;
    
    await taskService.approveExecution(
      execution.id,
      '–û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º',
      ctx.user.telegramId
    );

    const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
    
    const successText = `
‚úÖ <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–î–û–ë–†–ï–ù–û</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> ${execution.task.title}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userInfo}
üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ:</b> ${finalAmount} GRAM
üë®‚Äçüíª <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> ${ctx.user.firstName || ctx.user.username}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${formatDateTime(new Date())}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤.
`;

    const keyboard = new InlineKeyboard()
      .text('üìã –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'admin:pending_tasks')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

    await ctx.editMessageText(successText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Approval error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

// Handle rejection
async function handleRejection(conversation: any, ctx: BotContext, execution: any) {
  try {
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
    
    const reasonResponse = await conversation.waitFor(':text');
    const reason = reasonResponse.message?.text?.trim();
    
    if (!reason || reason.length < 5) {
      await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    if (reason.length > 500) {
      await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)');
      return;
    }

    await taskService.rejectExecution(
      execution.id,
      reason,
      ctx.user.telegramId
    );

    const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
    
    const successText = `
‚ùå <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> ${execution.task.title}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userInfo}
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${reason}
üë®‚Äçüíª <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> ${ctx.user.firstName || ctx.user.username}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${formatDateTime(new Date())}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã.
`;

    const keyboard = new InlineKeyboard()
      .text('üìã –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'admin:pending_tasks')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

    await ctx.editMessageText(successText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Rejection error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

// Handle custom approval with different amount
async function handleCustomApproval(conversation: any, ctx: BotContext, execution: any) {
  try {
    await ctx.reply(`üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª: ${execution.rewardAmount} GRAM):`);
    
    const amountResponse = await conversation.waitFor(':text');
    const amountText = amountResponse.message?.text?.trim();
    const customAmount = parseFloat(amountText || '');
    
    if (isNaN(customAmount) || customAmount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return;
    }

    if (customAmount > execution.rewardAmount * 2) {
      await ctx.reply('‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —É–¥–≤–æ–µ–Ω–Ω—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É');
      return;
    }

    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã:');
    
    const reasonResponse = await conversation.waitFor(':text');
    const reason = reasonResponse.message?.text?.trim();
    
    if (!reason) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      return;
    }

    await handleApproval(conversation, ctx, execution, customAmount);

  } catch (error) {
    console.error('Custom approval error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

// Handle postpone
async function handlePostpone(conversation: any, ctx: BotContext, execution: any) {
  const postponeText = `
‚è∞ <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–õ–û–ñ–ï–ù–û</b>

–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.
–û–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
`;

  const keyboard = new InlineKeyboard()
    .text('üìã –ö —Å–ø–∏—Å–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'admin:pending_tasks')
    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(postponeText, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

// Show user details
async function showUserDetails(conversation: any, ctx: BotContext, user: any) {
  try {
    const userStats = await userService.getUserStatistics(user.telegramId);
    
    const userDetailsText = `
üë§ <b>–î–ï–¢–ê–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üÜî <b>ID:</b> ${user.telegramId}
üë§ <b>–ò–º—è:</b> ${user.firstName}
${user.username ? `üì± <b>Username:</b> @${user.username}` : ''}
üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${getLevelEmoji(user.level)} ${user.level}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance} GRAM

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCompleted}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCreated}
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: ${user.totalEarned} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${user.totalSpent} GRAM
‚îî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formatDate(user.createdAt)}

üìà <b>–†–µ–π—Ç–∏–Ω–≥:</b>
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${userStats?.approvalRate || 0}%
‚îú –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${userStats?.averageRating || 0}/5
‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${formatDate(user.updatedAt)}
`;

    const keyboard = new InlineKeyboard()
      .text('üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin:user_full_stats:${user.telegramId}`)
      .text('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin:ban_user:${user.telegramId}`).row()
      .text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', `admin:user_balance:${user.telegramId}`)
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'back_to_moderation');

    await ctx.reply(userDetailsText, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('User details error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// Admin find user conversation
export const adminFindUserConversation = createConversation('adminFindUser', async (conversation, ctx: BotContext) => {
  if (!isAdmin(ctx.from!.id)) {
    await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }

  try {
    await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, username –∏–ª–∏ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞:');
    
    const searchResponse = await conversation.waitFor(':text');
    const searchQuery = searchResponse.message?.text?.trim();
    
    if (!searchQuery) {
      await ctx.reply('‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    // Search for user
    const users = await userService.searchUsers(searchQuery);
    
    if (users.length === 0) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    if (users.length === 1) {
      await showUserAdminPanel(ctx, users[0]);
    } else {
      // Show multiple results
      let resultText = `üîç <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê</b>\n\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n\n`;
      
      users.slice(0, 10).forEach((user, index) => {
        const userInfo = user.username ? `@${user.username}` : user.firstName;
        resultText += `${index + 1}. ${userInfo}\n`;
        resultText += `   ID: ${user.telegramId}\n`;
        resultText += `   –£—Ä–æ–≤–µ–Ω—å: ${getLevelEmoji(user.level)} ${user.level}\n\n`;
      });

      if (users.length > 10) {
        resultText += `...–∏ –µ—â–µ ${users.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
      }

      const keyboard = new InlineKeyboard();
      users.slice(0, 5).forEach((user, index) => {
        const userInfo = user.username ? `@${user.username}` : user.firstName;
        keyboard.text(
          `üë§ ${userInfo}`,
          `admin:select_user:${user.telegramId}`
        ).row();
      });

      keyboard.text('üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', 'admin:find_user')
        .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin:users');

      await ctx.reply(resultText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });
    }

  } catch (error) {
    console.error('Find user conversation error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// Admin add balance conversation
export const adminAddBalanceConversation = createConversation('adminAddBalance', async (conversation, ctx: BotContext) => {
  if (!isAdmin(ctx.from!.id)) {
    await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }

  try {
    await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    
    const userIdResponse = await conversation.waitFor(':text');
    const userIdText = userIdResponse.message?.text?.trim();
    const userId = parseInt(userIdText || '');
    
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const user = await userService.getUserByTelegramId(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    await ctx.reply(`üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} GRAM):`);
    
    const amountResponse = await conversation.waitFor(':text');
    const amountText = amountResponse.message?.text?.trim();
    const amount = parseFloat(amountText || '');
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return;
    }

    if (amount > 1000000) {
      await ctx.reply('‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ (–º–∞–∫—Å–∏–º—É–º 1,000,000 GRAM)');
      return;
    }

    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:');
    
    const reasonResponse = await conversation.waitFor(':text');
    const reason = reasonResponse.message?.text?.trim();
    
    if (!reason) {
      await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É');
      return;
    }

    // Confirm action
    const userInfo = user.username ? `@${user.username}` : user.firstName;
    const confirmText = `
üí∞ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userInfo}
üí∞ <b>–°—É–º–º–∞:</b> ${amount} GRAM
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${reason}

üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance} ‚Üí ${parseFloat(user.balance) + amount} GRAM

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ?
`;

    const confirmKeyboard = new InlineKeyboard()
      .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

    await ctx.reply(confirmText, {
      reply_markup: confirmKeyboard,
      parse_mode: 'HTML'
    });

    const confirmResponse = await conversation.waitForCallbackQuery();
    
    if (confirmResponse.data === 'cancel') {
      await confirmResponse.answerCallbackQuery('‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    if (confirmResponse.data === 'confirm') {
      await confirmResponse.answerCallbackQuery('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
      
      await balanceService.updateBalance(
        userId,
        amount,
        'bonus',
        reason,
        { adminId: ctx.user.telegramId, adminName: ctx.user.firstName || ctx.user.username }
      );

      const successText = `
‚úÖ <b>–ë–ê–õ–ê–ù–° –ù–ê–ß–ò–°–õ–ï–ù</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userInfo}
üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–æ:</b> ${amount} GRAM
üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${reason}
üë®‚Äçüíª <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> ${ctx.user.firstName || ctx.user.username}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${formatDateTime(new Date())}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏.
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ï—â–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ', 'admin:add_balance')
        .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin:users')
        .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.editMessageText(successText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });
    }

  } catch (error) {
    console.error('Add balance conversation error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// Admin broadcast conversation
export const adminBroadcastConversation = createConversation('adminBroadcast', async (conversation, ctx: BotContext) => {
  if (!isAdmin(ctx.from!.id)) {
    await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }

  const { type } = ctx.session.data || {};

  try {
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
    
    const messageResponse = await conversation.waitFor(':text');
    const messageText = messageResponse.message?.text;
    
    if (!messageText || messageText.length < 10) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    if (messageText.length > 4000) {
      await ctx.reply('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)');
      return;
    }

    // Show preview
    const previewText = `
üì¢ <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†</b>

<i>–ö–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</i>

${messageText}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏:</b>
‚Ä¢ –¢–∏–ø: ${type === 'all' ? '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' : '–¢–µ—Å—Ç–æ–≤–∞—è'}
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${type === 'all' ? '~1000' : '1 (–≤–∞–º)'}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?
`;

    const confirmKeyboard = new InlineKeyboard()
      .text('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'send')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

    await ctx.reply(previewText, {
      reply_markup: confirmKeyboard,
      parse_mode: 'HTML'
    });

    const confirmResponse = await conversation.waitForCallbackQuery();
    
    if (confirmResponse.data === 'cancel') {
      await confirmResponse.answerCallbackQuery('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return;
    }

    if (confirmResponse.data === 'send') {
      await confirmResponse.answerCallbackQuery('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...');
      
      if (type === 'test') {
        // Send test message only to admin
        await ctx.api.sendMessage(ctx.user.telegramId, messageText, { parse_mode: 'HTML' });
        
        await ctx.editMessageText(
          '‚úÖ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.',
          { parse_mode: 'HTML' }
        );
      } else {
        // Start broadcast (this would be implemented with job queue)
        await ctx.editMessageText(
          'üì§ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê</b>\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.',
          { parse_mode: 'HTML' }
        );
      }
    }

  } catch (error) {
    console.error('Broadcast conversation error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// Show user admin panel
async function showUserAdminPanel(ctx: BotContext, user: any) {
  const userInfo = user.username ? `@${user.username}` : user.firstName;
  
  const panelText = `
üë§ <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú</b>

üÜî <b>ID:</b> ${user.telegramId}
üë§ <b>–ò–º—è:</b> ${user.firstName}
${user.username ? `üì± <b>Username:</b> @${user.username}` : ''}
üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${getLevelEmoji(user.level)} ${user.level}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance} GRAM
üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${user.isBanned ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

  const keyboard = new InlineKeyboard()
    .text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', `admin:user_balance:${user.telegramId}`)
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin:user_stats:${user.telegramId}`).row()
    .text('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin:ban_user:${user.telegramId}`)
    .text('üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin:unban_user:${user.telegramId}`).row()
    .text('üìù –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', `admin:user_activity:${user.telegramId}`)
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin:users');

  await ctx.reply(panelText, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

// Utility functions
function getLevelEmoji(level: string): string {
  const emojis = {
    bronze: 'ü•â',
    silver: 'ü•à',
    gold: 'ü•á',
    premium: 'üíé'
  };
  return emojis[level as keyof typeof emojis] || 'ü•â';
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}