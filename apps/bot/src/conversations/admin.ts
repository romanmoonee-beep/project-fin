import { createConversation } from '@grammyjs/conversations';
import { InlineKeyboard } from 'grammy';
import { adminService } from '../services/adminService';
import { withdrawalService } from '../services/withdrawalService';
import { broadcastService } from '../services/broadcastService';
import { UserLevel } from '@pr-gram/database';
import type { BotContext } from '../types/context';

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const searchUserConversation = createConversation('searchUser', async (conversation, ctx: BotContext) => {
  await ctx.reply('üîç –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  
  const response = await conversation.waitFor(':text');
  const searchQuery = response.message?.text?.trim();
  
  if (!searchQuery) {
    await ctx.reply('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω');
    return;
  }
  
  try {
    let userId: number;
    
    if (searchQuery.startsWith('@')) {
      // –ü–æ–∏—Å–∫ –ø–æ username
      const username = searchQuery.slice(1);
      const user = await adminService.findUserByUsername(username);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }
      userId = user.telegramId;
    } else if (!isNaN(Number(searchQuery))) {
      // –ü–æ–∏—Å–∫ –ø–æ ID
      userId = Number(searchQuery);
    } else {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username');
      return;
    }
    
    const user = await adminService.getUserInfo(userId);
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const userText = `
üë§ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï</b>

üÜî <b>ID:</b> ${user.telegramId}
üë§ <b>–ò–º—è:</b> ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± <b>Username:</b> ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}
üèÜ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${getLevelEmoji(user.level)} ${user.level}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance} GRAM
üíé <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> ${user.frozenBalance} GRAM
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${formatDate(user.createdAt)}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${user.metadata?.banned ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCompleted}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${user.tasksCreated}
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª: ${user.totalEarned} GRAM
‚îî –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª: ${user.totalSpent} GRAM
`;

    const keyboard = new InlineKeyboard()
      .text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `admin:change_balance:${userId}`)
      .text('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin:ban_user:${userId}`).row()
      .text('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin:user_stats:${userId}`)
      .text('üìù –ò—Å—Ç–æ—Ä–∏—è', `admin:user_history:${userId}`).row()
      .text('üè† –ê–¥–º–∏–Ω –º–µ–Ω—é', 'admin:main');
    
    await ctx.reply(userText, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    
  } catch (error) {
    console.error('Search user error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const changeUserBalanceConversation = createConversation('changeUserBalance', async (conversation, ctx: BotContext) => {
  await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  
  const userResponse = await conversation.waitFor(':text');
  const userIdText = userResponse.message?.text?.trim();
  
  if (!userIdText || isNaN(Number(userIdText))) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  const userId = Number(userIdText);
  
  await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Å + –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, - –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è):');
  
  const amountResponse = await conversation.waitFor(':text');
  const amountText = amountResponse.message?.text?.trim();
  
  if (!amountText) {
    await ctx.reply('‚ùå –°—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
    return;
  }
  
  const amount = parseFloat(amountText);
  if (isNaN(amount)) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
    return;
  }
  
  await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:');
  
  const reasonResponse = await conversation.waitFor(':text');
  const reason = reasonResponse.message?.text?.trim();
  
  if (!reason) {
    await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
    return;
  }
  
  try {
    const result = await adminService.updateUserBalance(
      userId,
      amount,
      reason,
      ctx.user.telegramId
    );
    
    const operationType = amount > 0 ? '–ø–æ–ø–æ–ª–Ω–µ–Ω' : '—Å–ø–∏—Å–∞–Ω';
    await ctx.reply(
      `‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${operationType} –Ω–∞ ${Math.abs(amount)} GRAM\n\n` +
      `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance} GRAM\n` +
      `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
    );
    
  } catch (error) {
    console.error('Change balance error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const banUserConversation = createConversation('banUser', async (conversation, ctx: BotContext) => {
  await ctx.reply('üö´ –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:');
  
  const userResponse = await conversation.waitFor(':text');
  const userIdText = userResponse.message?.text?.trim();
  
  if (!userIdText || isNaN(Number(userIdText))) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  const userId = Number(userIdText);
  
  await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:');
  
  const reasonResponse = await conversation.waitFor(':text');
  const reason = reasonResponse.message?.text?.trim();
  
  if (!reason) {
    await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
    return;
  }
  
  await ctx.reply('‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö (–∏–ª–∏ 0 –¥–ª—è –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏):');
  
  const durationResponse = await conversation.waitFor(':text');
  const durationText = durationResponse.message?.text?.trim();
  
  let duration: number | undefined;
  if (durationText && durationText !== '0') {
    duration = parseFloat(durationText);
    if (isNaN(duration) || duration < 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
      return;
    }
  }
  
  try {
    await adminService.banUser(userId, reason, ctx.user.telegramId, duration);
    
    const durationText = duration 
      ? `–Ω–∞ ${duration} —á–∞—Å–æ–≤` 
      : '–Ω–∞–≤—Å–µ–≥–¥–∞';
    
    await ctx.reply(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ${durationText}\n\n` +
      `üë§ ID: ${userId}\n` +
      `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
    );
    
  } catch (error) {
    console.error('Ban user error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
export const createBroadcastConversation = createConversation('createBroadcast', async (conversation, ctx: BotContext) => {
  let broadcastData: any = {};
  
  // –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  await ctx.reply(
    'üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
    {
      reply_markup: new InlineKeyboard()
        .text('üåç –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'broadcast:all')
        .text('ü•â Bronze', 'broadcast:bronze').row()
        .text('ü•à Silver', 'broadcast:silver')
        .text('ü•á Gold', 'broadcast:gold').row()
        .text('üíé Premium', 'broadcast:premium')
        .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', 'broadcast:custom').row()
        .text('‚ùå –û—Ç–º–µ–Ω–∞', 'broadcast:cancel')
    }
  );
  
  const audienceResponse = await conversation.waitForCallbackQuery();
  const audienceData = audienceResponse.callbackQuery.data;
  
  if (audienceData === 'broadcast:cancel') {
    await audienceResponse.answerCallbackQuery('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    return;
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  if (audienceData === 'broadcast:all') {
    broadcastData.filters = {};
  } else if (audienceData === 'broadcast:custom') {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    broadcastData.filters = {};
  } else {
    const level = audienceData.replace('broadcast:', '') as UserLevel;
    broadcastData.filters = { levels: [level] };
  }
  
  await audienceResponse.answerCallbackQuery();
  
  // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  await ctx.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
  
  const messageResponse = await conversation.waitFor(':text');
  const messageText = messageResponse.message?.text;
  
  if (!messageText) {
    await ctx.reply('‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
    return;
  }
  
  broadcastData.message = {
    text: messageText,
    parseMode: 'HTML'
  };
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
  const targetUsers = await broadcastService.getUsersForBroadcast(broadcastData.filters);
  
  await ctx.reply(
    `üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò</b>\n\n` +
    `üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> ${targetUsers.length}\n` +
    `üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${messageText}\n\n` +
    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:`,
    {
      reply_markup: new InlineKeyboard()
        .text('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'broadcast:confirm')
        .text('üß™ –¢–µ—Å—Ç –º–Ω–µ', 'broadcast:test')
        .text('‚ùå –û—Ç–º–µ–Ω–∞', 'broadcast:cancel'),
      parse_mode: 'HTML'
    }
  );
  
  const confirmResponse = await conversation.waitForCallbackQuery();
  const confirmData = confirmResponse.callbackQuery.data;
  
  if (confirmData === 'broadcast:cancel') {
    await confirmResponse.answerCallbackQuery('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    return;
  }
  
  if (confirmData === 'broadcast:test') {
    // –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    await confirmResponse.answerCallbackQuery('üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç...');
    
    try {
      await broadcastService.sendTestMessage(
        broadcastData.message,
        [ctx.user.telegramId]
      );
      await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–∞');
    }
    return;
  }
  
  if (confirmData === 'broadcast:confirm') {
    await confirmResponse.answerCallbackQuery('üì§ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...');
    
    try {
      const result = await broadcastService.sendBroadcast(
        broadcastData.message,
        broadcastData.filters,
        ctx.user.telegramId
      );
      
      await ctx.editMessageText(
        `‚úÖ <b>–†–ê–°–°–´–õ–ö–ê –ó–ê–ü–£–©–ï–ù–ê</b>\n\n` +
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUsers}\n` +
        `‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sentCount}\n` +
        `‚îú –û—à–∏–±–∫–∏: ${result.failedCount}\n` +
        `‚îî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: ${result.blockedCount}\n\n` +
        `üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: ${result.id}`,
        { parse_mode: 'HTML' }
      );
      
    } catch (error) {
      console.error('Broadcast error:', error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
export const processWithdrawalConversation = createConversation('processWithdrawal', async (conversation, ctx: BotContext) => {
  const callbackData = ctx.callbackQuery?.data;
  if (!callbackData) return;
  
  const [, action, requestId] = callbackData.split(':');
  
  if (action === 'approve') {
    await ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
    
    const commentResponse = await conversation.waitFor(':text');
    const comment = commentResponse.message?.text?.trim();
    
    try {
      await withdrawalService.approveWithdrawal(requestId, ctx.user.telegramId, comment);
      await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞');
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  } else if (action === 'reject') {
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:');
    
    const reasonResponse = await conversation.waitFor(':text');
    const reason = reasonResponse.message?.text?.trim();
    
    if (!reason) {
      await ctx.reply('‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
      return;
    }
    
    try {
      await withdrawalService.rejectWithdrawal(requestId, ctx.user.telegramId, reason);
      await ctx.reply('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }
});

// –£—Ç–∏–ª–∏—Ç—ã
function getLevelEmoji(level: string): string {
  const emojis = {
    bronze: 'ü•â',
    silver: 'ü•à',
    gold: 'ü•á',
    premium: 'üíé'
  };
  return emojis[level as keyof typeof emojis] || 'ü•â';
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}