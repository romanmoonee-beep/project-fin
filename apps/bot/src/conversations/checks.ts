import { createConversation } from '@grammyjs/conversations';
import { InlineKeyboard } from 'grammy';
import { checkService } from '../services/checkService';
import { BOT_CONSTANTS } from '../config';
import type { BotContext } from '../types/context';

// Create check conversation
export const createCheckConversation = createConversation('createCheck', async (conversation, ctx: BotContext) => {
  let checkData = ctx.session.checkData || {};

  try {
    // Step 1: Enter amount
    if (!checkData.amount) {
      await ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ (–æ—Ç 10 –¥–æ 100,000 GRAM):');
      
      const amountResponse = await conversation.waitFor(':text');
      const amountText = amountResponse.message?.text?.trim();
      const amount = parseInt(amountText || '');
      
      if (isNaN(amount) || amount < BOT_CONSTANTS.CHECK_LIMITS.MIN_AMOUNT || amount > BOT_CONSTANTS.CHECK_LIMITS.MAX_AMOUNT) {
        await ctx.reply(`‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${BOT_CONSTANTS.CHECK_LIMITS.MIN_AMOUNT} –¥–æ ${BOT_CONSTANTS.CHECK_LIMITS.MAX_AMOUNT} GRAM`);
        return;
      }
      
      if (ctx.user.balance.toNumber() < amount) {
        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
        return;
      }
      
      checkData.amount = amount;
    }

    // Step 2: Enter activations count
    if (!checkData.maxActivations) {
      const maxActivations = checkData.type === 'personal' ? 1 : undefined;
      
      if (maxActivations) {
        checkData.maxActivations = maxActivations;
      } else {
        await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–æ—Ç 1 –¥–æ 10,000):');
        
        const activationsResponse = await conversation.waitFor(':text');
        const activationsText = activationsResponse.message?.text?.trim();
        const activations = parseInt(activationsText || '');
        
        if (isNaN(activations) || activations < BOT_CONSTANTS.CHECK_LIMITS.MIN_ACTIVATIONS || activations > BOT_CONSTANTS.CHECK_LIMITS.MAX_ACTIVATIONS) {
          await ctx.reply(`‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${BOT_CONSTANTS.CHECK_LIMITS.MIN_ACTIVATIONS} –¥–æ ${BOT_CONSTANTS.CHECK_LIMITS.MAX_ACTIVATIONS}`);
          return;
        }
        
        const totalCost = checkData.amount * activations;
        if (ctx.user.balance.toNumber() < totalCost) {
          await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: ${totalCost} GRAM, —É –≤–∞—Å: ${ctx.user.balance} GRAM`);
          return;
        }
        
        checkData.maxActivations = activations;
      }
    }

    // Step 3: Enter comment (optional)
    if (checkData.comment === undefined) {
      const skipKeyboard = new InlineKeyboard().text('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_comment');
      
      await ctx.reply('üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', {
        reply_markup: skipKeyboard
      });
      
      const commentResponse = await conversation.waitForCallbackQuery(['skip_comment'], async (ctx) => {
        return await conversation.waitFor(':text');
      });
      
      if (commentResponse.data === 'skip_comment') {
        await commentResponse.answerCallbackQuery();
        checkData.comment = '';
      } else {
        const comment = commentResponse.message?.text?.trim();
        if (comment && comment.length > BOT_CONSTANTS.CHECK_LIMITS.MAX_COMMENT_LENGTH) {
          await ctx.reply(`‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º ${BOT_CONSTANTS.CHECK_LIMITS.MAX_COMMENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)`);
          return;
        }
        checkData.comment = comment || '';
      }
    }

    // Step 4: Set password (for protected checks)
    if (checkData.type === 'protected' && !checkData.password) {
      await ctx.reply('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —á–µ–∫–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤):');
      
      const passwordResponse = await conversation.waitFor(':text');
      const password = passwordResponse.message?.text?.trim();
      
      if (!password || password.length > BOT_CONSTANTS.CHECK_LIMITS.MAX_PASSWORD_LENGTH) {
        await ctx.reply(`‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ ${BOT_CONSTANTS.CHECK_LIMITS.MAX_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
        return;
      }
      
      checkData.password = password;
    }

    // Step 5: Choose design (for gift checks)
    if (checkData.type === 'gift' && !checkData.design) {
      const designKeyboard = new InlineKeyboard()
        .text('üéÅ –ü–æ–¥–∞—Ä–æ–∫', 'design:üéÅ:red').text('üíù –°—é—Ä–ø—Ä–∏–∑', 'design:üíù:pink').row()
        .text('üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫', 'design:üéâ:gold').text('üéä –í–µ—Å–µ–ª—å–µ', 'design:üéä:blue').row()
        .text('‚≠ê –ó–≤–µ–∑–¥–∞', 'design:‚≠ê:yellow').text('üíé –ê–ª–º–∞–∑', 'design:üíé:purple').row()
        .text('üí∞ –î–µ–Ω—å–≥–∏', 'design:üí∞:green').text('üèÜ –ü–æ–±–µ–¥–∞', 'design:üèÜ:orange').row();

      await ctx.reply('üé® –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∑–∞–π–Ω —á–µ–∫–∞:', { reply_markup: designKeyboard });
      
      const designResponse = await conversation.waitForCallbackQuery();
      
      if (designResponse.data?.startsWith('design:')) {
        const [, emoji, color] = designResponse.data.split(':');
        checkData.design = { emoji, color };
        await designResponse.answerCallbackQuery();
      } else {
        await designResponse.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏–∑–∞–π–Ω–∞');
        return;
      }
    }

    // Step 6: Set expiration (optional)
    if (checkData.expiresAt === undefined) {
      const expirationKeyboard = new InlineKeyboard()
        .text('1 —á–∞—Å', 'expire:1h').text('6 —á–∞—Å–æ–≤', 'expire:6h').text('1 –¥–µ–Ω—å', 'expire:1d').row()
        .text('3 –¥–Ω—è', 'expire:3d').text('7 –¥–Ω–µ–π', 'expire:7d').text('30 –¥–Ω–µ–π', 'expire:30d').row()
        .text('‚è≠Ô∏è –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', 'expire:never');

      await ctx.reply('‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–∫–∞:', { reply_markup: expirationKeyboard });
      
      const expirationResponse = await conversation.waitForCallbackQuery();
      
      if (expirationResponse.data?.startsWith('expire:')) {
        const duration = expirationResponse.data.replace('expire:', '');
        
        if (duration === 'never') {
          checkData.expiresAt = null;
        } else {
          const expiresAt = calculateExpirationDate(duration);
          checkData.expiresAt = expiresAt;
        }
        
        await expirationResponse.answerCallbackQuery();
      } else {
        await expirationResponse.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
        return;
      }
    }

    // Step 7: Review and confirm
    const totalCost = checkData.amount * checkData.maxActivations;
    const design = checkData.design || { emoji: 'üí∞', color: 'default' };
    
    const reviewText = `
${design.emoji} <b>–°–û–ó–î–ê–¢–¨ –ß–ï–ö</b>

üí∞ <b>–°—É–º–º–∞:</b> ${checkData.amount} GRAM
üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> ${checkData.maxActivations}
üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${checkData.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
${checkData.password ? 'üîí <b>–ü–∞—Ä–æ–ª—å:</b> –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 'üîì <b>–ü–∞—Ä–æ–ª—å:</b> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üé® <b>–î–∏–∑–∞–π–Ω:</b> ${design.emoji} ${design.color}
‚è∞ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> ${checkData.expiresAt ? formatDate(checkData.expiresAt) : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'}

üí≥ <b>–ö —Å–ø–∏—Å–∞–Ω–∏—é:</b> ${totalCost} GRAM
üí∞ <b>–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞:</b> ${ctx.user.balance.toNumber() - totalCost} GRAM

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞?
`;

    const confirmKeyboard = new InlineKeyboard()
      .text('‚úÖ –°–æ–∑–¥–∞—Ç—å —á–µ–∫', 'confirm')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

    await ctx.reply(reviewText, { 
      reply_markup: confirmKeyboard,
      parse_mode: 'HTML'
    });

    const confirmResponse = await conversation.waitForCallbackQuery();
    
    if (confirmResponse.data === 'cancel') {
      await confirmResponse.answerCallbackQuery('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    if (confirmResponse.data === 'confirm') {
      await confirmResponse.answerCallbackQuery('‚è≥ –°–æ–∑–¥–∞–µ–º —á–µ–∫...');
      
      try {
        // Create the check
        const check = await checkService.createCheck(ctx.user.telegramId, {
          amount: checkData.amount,
          maxActivations: checkData.maxActivations,
          comment: checkData.comment,
          password: checkData.password,
          design: checkData.design,
          expiresAt: checkData.expiresAt,
          conditions: {}
        });

        const checkUrl = `https://t.me/prgram_bot?start=check_${check.id}`;
        
        const successText = `
${design.emoji} <b>–ß–ï–ö –°–û–ó–î–ê–ù!</b>

${checkData.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

üí∞ <b>–°—É–º–º–∞:</b> ${checkData.amount} GRAM
üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> ${checkData.maxActivations}
‚è∞ <b>–°–æ–∑–¥–∞–Ω:</b> ${formatDateTime(check.createdAt)}
${checkData.expiresAt ? `‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> ${formatDate(checkData.expiresAt)}` : ''}

üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>
<code>${checkUrl}</code>

üì§ <b>–ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>

<code>${design.emoji} ${checkData.comment || '–ß–µ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ GRAM'}

üí∞ –°—É–º–º–∞: ${checkData.amount} GRAM
üë• –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${checkData.maxActivations}

üéÅ –ü–æ–ª—É—á–∏—Ç—å: ${checkUrl}</code>
`;

        const successKeyboard = new InlineKeyboard()
          .url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `https://t.me/share/url?url=${encodeURIComponent(checkUrl)}`)
          .text('üìä –ú–æ–∏ —á–µ–∫–∏', 'checks:my_checks').row()
          .text('‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ —á–µ–∫', 'menu:checks')
          .text('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

        await ctx.editMessageText(successText, {
          reply_markup: successKeyboard,
          parse_mode: 'HTML'
        });

        // Clear session data
        ctx.session.checkData = {};

      } catch (error) {
        console.error('Create check error:', error);
        await ctx.editMessageText(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          { reply_markup: new InlineKeyboard().text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main') }
        );
      }
    }

  } catch (error) {
    console.error('Check conversation error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// Activate check conversation
export const activateCheckConversation = createConversation('activateCheck', async (conversation, ctx: BotContext) => {
  const { checkId } = ctx.session.checkData || {};
  
  if (!checkId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: ID —á–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    const check = await checkService.getCheckDetails(checkId);
    
    if (!check.password) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: —á–µ–∫ –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º');
      return;
    }

    await ctx.reply('üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —á–µ–∫–∞:');
    
    const passwordResponse = await conversation.waitFor(':text');
    const password = passwordResponse.message?.text?.trim();
    
    if (!password) {
      await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    if (password !== check.password) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return;
    }

    // Activate check
    const result = await checkService.activateCheck(checkId, ctx.user.telegramId, { password });
    
    if (result.success) {
      const design = check.design || { emoji: 'üí∞', color: 'default' };
      
      const successText = `
üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

${design.emoji} ${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

üí∞ +${result.amount} GRAM –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å

üìä <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.balance.toNumber() + result.amount} GRAM

üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞!
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ', 'menu:earn')
        .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.reply(successText, { 
        reply_markup: keyboard,
        parse_mode: 'HTML' 
      });
    } else {
      await ctx.reply(`‚ùå ${result.message}`);
    }

    // Clear session data
    ctx.session.checkData = {};

  } catch (error) {
    console.error('Activate check conversation error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
});

// Utility functions
function calculateExpirationDate(duration: string): Date {
  const now = new Date();
  
  switch (duration) {
    case '1h':
      return new Date(now.getTime() + 60 * 60 * 1000);
    case '6h':
      return new Date(now.getTime() + 6 * 60 * 60 * 1000);
    case '1d':
      return new Date(now.getTime() + 24 * 60 * 60 * 1000);
    case '3d':
      return new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000);
    case '30d':
      return new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000);
    default:
      return new Date(now.getTime() + 24 * 60 * 60 * 1000);
  }
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}