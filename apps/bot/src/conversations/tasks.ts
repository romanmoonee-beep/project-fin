import { createConversation } from '@grammyjs/conversations';
import { InlineKeyboard } from 'grammy';
import { TaskType } from '@pr-gram/database';
import { taskService } from '../services/taskService';
import { TASK_TYPE_CONFIG } from '@pr-gram/shared';
import type { BotContext } from '../types/context';

// Create task conversation
export const createTaskConversation = createConversation('createTask', async (conversation, ctx: BotContext) => {
  let taskData = ctx.session.taskData || {};

  try {
    // Step 1: Select task type
    if (!taskData.type) {
      const typeKeyboard = new InlineKeyboard()
        .text('üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', 'type:subscribe').row()
        .text('üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É', 'type:join_group').row()
        .text('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞', 'type:view_post').row()
        .text('ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞', 'type:use_bot').row()
        .text('üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç', 'type:react_post').row()
        .text('‚≠ê –ü—Ä–µ–º–∏—É–º –±—É—Å—Ç', 'type:premium_boost').row()
        .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

      await ctx.reply('üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', { reply_markup: typeKeyboard });
      
      const response = await conversation.waitForCallbackQuery();
      
      if (response.data === 'cancel') {
        await response.answerCallbackQuery('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
        return;
      }

      if (response.data?.startsWith('type:')) {
        taskData.type = response.data.replace('type:', '') as TaskType;
        await response.answerCallbackQuery();
      } else {
        await response.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
        return;
      }
    }

    // Step 2: Enter title
    if (!taskData.title) {
      await ctx.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤):');
      
      const titleResponse = await conversation.waitFor(':text');
      const title = titleResponse.message?.text?.trim();
      
      if (!title || title.length < 3 || title.length > 255) {
        await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
      }
      
      taskData.title = title;
    }

    // Step 3: Enter description
    if (!taskData.description) {
      await ctx.reply('üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):');
      
      const descResponse = await conversation.waitFor(':text');
      const description = descResponse.message?.text?.trim();
      
      if (!description || description.length < 10 || description.length > 1000) {
        await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
      }
      
      taskData.description = description;
    }

    // Step 4: Enter target URL
    if (!taskData.targetUrl && needsUrl(taskData.type)) {
      const urlPrompt = getUrlPrompt(taskData.type);
      await ctx.reply(urlPrompt);
      
      const urlResponse = await conversation.waitFor(':text');
      const url = urlResponse.message?.text?.trim();
      
      if (!url || !isValidUrl(url, taskData.type)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞');
        return;
      }
      
      taskData.targetUrl = url;
    }

    // Step 5: Enter reward
    if (!taskData.reward) {
      const config = TASK_TYPE_CONFIG[taskData.type];
      await ctx.reply(
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ—Ç ${config.minReward} –¥–æ ${config.maxReward} GRAM):`
      );
      
      const rewardResponse = await conversation.waitFor(':text');
      const rewardText = rewardResponse.message?.text?.trim();
      const reward = parseInt(rewardText || '');
      
      if (isNaN(reward) || reward < config.minReward || reward > config.maxReward) {
        await ctx.reply(`‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${config.minReward} –¥–æ ${config.maxReward} GRAM`);
        return;
      }
      
      taskData.reward = reward;
    }

    // Step 6: Enter target count
    if (!taskData.targetCount) {
      await ctx.reply('üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π (–æ—Ç 1 –¥–æ 10000):');
      
      const countResponse = await conversation.waitFor(':text');
      const countText = countResponse.message?.text?.trim();
      const count = parseInt(countText || '');
      
      if (isNaN(count) || count < 1 || count > 10000) {
        await ctx.reply('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000');
        return;
      }
      
      taskData.targetCount = count;
    }

    // Step 7: Select verification type
    if (!taskData.verificationType) {
      const verificationKeyboard = new InlineKeyboard()
        .text('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è', 'verification:auto').row()
        .text('üë®‚Äçüíª –†—É—á–Ω–∞—è', 'verification:manual').row()
        .text('üîÑ –°–º–µ—à–∞–Ω–Ω–∞—è', 'verification:hybrid').row();

      await ctx.reply('üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:', { reply_markup: verificationKeyboard });
      
      const verResponse = await conversation.waitForCallbackQuery();
      
      if (verResponse.data?.startsWith('verification:')) {
        taskData.verificationType = verResponse.data.replace('verification:', '');
        await verResponse.answerCallbackQuery();
      } else {
        await verResponse.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
        return;
      }
    }

    // Step 8: Review and confirm
    const totalCost = calculateTaskCost(taskData.reward!, taskData.targetCount!, ctx.user.level);
    const commission = totalCost - (taskData.reward! * taskData.targetCount!);
    
    const reviewText = `
‚úÖ <b>–°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï</b>

${getTaskTypeIcon(taskData.type!)} <b>${taskData.title}</b>
üí∞ ${taskData.reward} GRAM –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
üë• –¶–µ–ª—å: ${taskData.targetCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: ${getVerificationText(taskData.verificationType!)}
‚è∞ –ê–∫—Ç–∏–≤–Ω–æ –¥–æ: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

üìä <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
‚îú –ù–∞–≥—Ä–∞–¥—ã: ${taskData.reward! * taskData.targetCount!} GRAM
‚îú –ö–æ–º–∏—Å—Å–∏—è (${getCommissionRate(ctx.user.level)}%): ${commission} GRAM
‚îî <b>–ò—Ç–æ–≥–æ: ${totalCost} GRAM</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.balance} GRAM
üí∞ <b>–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${ctx.user.balance.toNumber() - totalCost} GRAM

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ?
`;

    const confirmKeyboard = new InlineKeyboard()
      .text('‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'confirm')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');

    await ctx.reply(reviewText, { 
      reply_markup: confirmKeyboard,
      parse_mode: 'HTML'
    });

    const confirmResponse = await conversation.waitForCallbackQuery();
    
    if (confirmResponse.data === 'cancel') {
      await confirmResponse.answerCallbackQuery('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
      return;
    }

    if (confirmResponse.data === 'confirm') {
      await confirmResponse.answerCallbackQuery('‚è≥ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ...');
      
      try {
        // Create the task
        const task = await taskService.createTask(ctx.user.telegramId, {
          type: taskData.type!,
          title: taskData.title!,
          description: taskData.description!,
          reward: taskData.reward!,
          targetCount: taskData.targetCount!,
          targetUrl: taskData.targetUrl,
          verificationType: taskData.verificationType,
          conditions: {},
        });

        const successText = `
‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –°–û–ó–î–ê–ù–û!</b>

${getTaskTypeIcon(task.type)} <b>${task.title}</b>
üí∞ ${task.reward} GRAM –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
üë• –¶–µ–ª—å: ${task.targetCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚è∞ –ê–∫—Ç–∏–≤–Ω–æ –¥–æ: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚îú ID –∑–∞–¥–∞–Ω–∏—è: #${task.id.slice(-6)}
‚îú –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost} GRAM
‚îî –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${ctx.user.balance.toNumber() - totalCost} GRAM

üöÄ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
`;

        const successKeyboard = new InlineKeyboard()
          .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è', `task_stats:${task.id}`)
          .text('üì¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ', 'menu:promote')
          .text('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

        await ctx.editMessageText(successText, {
          reply_markup: successKeyboard,
          parse_mode: 'HTML'
        });

        // Clear session data
        ctx.session.taskData = {};

      } catch (error) {
        console.error('Create task error:', error);
        await ctx.editMessageText(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          { reply_markup: new InlineKeyboard().text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main') }
        );
      }
    }

  } catch (