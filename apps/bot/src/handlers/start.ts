import { Composer } from 'grammy';
import { mainMenu } from '../menus/main';
import { clearSession } from '../middleware/session';
import type { BotContext } from '../types/context';

export const startHandler = new Composer<BotContext>();

// Handle /start command
startHandler.command('start', async (ctx) => {
  await clearSession(ctx);
  
  try {
    const isNewUser = !ctx.user.createdAt || 
                     (Date.now() - ctx.user.createdAt.getTime()) < 60000; // Less than 1 minute old

    if (isNewUser) {
      // Welcome new user
      const welcomeText = ctx.t('start.welcome');
      
      await ctx.reply(welcomeText, {
        reply_markup: mainMenu,
        parse_mode: 'HTML'
      });

      // Check for referral bonus
      if (ctx.user.referrerId) {
        const referralBonusText = ctx.t('start.referral_bonus', {
          bonus: 1000 // Default bonus, would be calculated based on referrer level
        });
        
        await ctx.reply(referralBonusText, {
          parse_mode: 'HTML'
        });
      }
    } else {
      // Welcome returning user
      const returningText = ctx.t('start.returning_user', {
        name: ctx.user.firstName || ctx.user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        balance: ctx.user.balance.toString(),
        level: ctx.user.level
      });
      
      await ctx.reply(returningText, {
        reply_markup: mainMenu,
        parse_mode: 'HTML'
      });
    }

    // Log user activity
    await logUserActivity(ctx.user.telegramId, 'bot_start', 'User started bot', {
      isNewUser,
      hasReferrer: !!ctx.user.referrerId
    });

  } catch (error) {
    console.error('Start handler error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle /help command
startHandler.command('help', async (ctx) => {
  const helpText = `
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É PR GRAM**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/earn - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GRAM
/promote - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
/subscription - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

**–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –≤—Å—Ç—É–ø–∏—Ç–µ –∏ —Ç.–¥.)
3. –ü–æ–ª—É—á–∏—Ç–µ GRAM –Ω–∞ –±–∞–ª–∞–Ω—Å

**–ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üì¢ –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ

**–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /setup, /unsetup, /status

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @prgram_help
  `;

  await ctx.reply(helpText, {
    parse_mode: 'Markdown',
    reply_markup: mainMenu
  });
});

// Handle /menu command
startHandler.command('menu', async (ctx) => {
  const menuText = ctx.t('menu.main.title', {
    balance: ctx.user.balance.toString()
  });

  await ctx.reply(menuText, {
    reply_markup: mainMenu,
    parse_mode: 'HTML'
  });
});

// Handle /profile command
startHandler.command('profile', async (ctx) => {
  const profileText = ctx.t('profile.title') + '\n\n' +
    ctx.t('profile.info', {
      id: ctx.user.telegramId.toString(),
      username: ctx.user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      level: ctx.user.level,
      emoji: getLevelEmoji(ctx.user.level),
      balance: ctx.user.balance.toString(),
      frozen: ctx.user.frozenBalance.toString()
    }) + '\n\n' +
    ctx.t('profile.stats', {
      completedTasks: ctx.user.tasksCompleted.toString(),
      createdTasks: ctx.user.tasksCreated.toString(),
      referrals: '0', // Would be calculated
      premiumReferrals: '0', // Would be calculated
      totalEarned: ctx.user.totalEarned.toString()
    });

  await ctx.reply(profileText, {
    parse_mode: 'HTML'
  });
});

// Handle subscription check commands
startHandler.command('setup', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.\n\n' +
      '–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–º.'
    );
    return;
  }

  // Handle setup command in groups
  await handleSetupCommand(ctx);
});

startHandler.command('unsetup', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.'
    );
    return;
  }

  await handleUnsetupCommand(ctx);
});

startHandler.command('status', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.'
    );
    return;
  }

  await handleStatusCommand(ctx);
});

startHandler.command('setup_bot', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.'
    );
    return;
  }

  await handleSetupBotCommand(ctx);
});

startHandler.command('unsetup_bot', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply(
      '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.'
    );
    return;
  }

  await handleUnsetupBotCommand(ctx);
});

// Auto-delete commands
startHandler.command('autodelete', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply('‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.');
    return;
  }

  await handleAutoDeleteCommand(ctx);
});

startHandler.command('get_autodelete', async (ctx) => {
  if (ctx.chat.type === 'private') {
    await ctx.reply('‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.');
    return;
  }

  await handleGetAutoDeleteCommand(ctx);
});

// Helper functions
const getLevelEmoji = (level: string): string => {
  const emojis = {
    bronze: 'ü•â',
    silver: 'ü•à', 
    gold: 'ü•á',
    premium: 'üíé'
  };
  return emojis[level as keyof typeof emojis] || 'ü•â';
};

const logUserActivity = async (
  userId: number,
  type: string,
  description: string,
  metadata?: any
) => {
  try {
    // Implementation would use prisma to log activity
    console.log(`User activity: ${userId} - ${type}: ${description}`, metadata);
  } catch (error) {
    console.error('Log activity error:', error);
  }
};

// Subscription setup handlers
const handleSetupCommand = async (ctx: BotContext) => {
  const args = ctx.message?.text?.split(' ').slice(1) || [];
  
  if (args.length === 0) {
    await ctx.reply(
      'üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/setup @channel - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n' +
      '/setup @channel 1d - —Å —Ç–∞–π–º–µ—Ä–æ–º –Ω–∞ 1 –¥–µ–Ω—å\n\n' +
      '–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: s (—Å–µ–∫), m (–º–∏–Ω), h (—á–∞—Å), d (–¥–Ω–µ–π)'
    );
    return;
  }

  try {
    const target = args[0];
    const timer = args[1];
    
    // Validate target
    if (!target.startsWith('@') && isNaN(parseInt(target))) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.');
      return;
    }

    // Parse timer if provided
    let timerSeconds = 0;
    if (timer) {
      timerSeconds = parseTimer(timer);
      if (timerSeconds === 0) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30s, 5m, 2h, 1d');
        return;
      }
    }

    // Check admin permissions
    const member = await ctx.api.getChatMember(ctx.chat.id, ctx.from!.id);
    if (!['creator', 'administrator'].includes(member.status)) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.');
      return;
    }

    // Setup subscription check
    const subscriptionService = await import('../services/subscriptionService');
    await subscriptionService.subscriptionService.setupSubscriptionCheck(
      ctx.chat.id,
      {
        type: target.startsWith('@') ? 'public_channel' : 'private_channel',
        target,
        timer: timerSeconds,
        createdBy: ctx.from!.id
      }
    );

    let responseText = `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\nüì∫ –ö–∞–Ω–∞–ª: ${target}`;
    if (timer) {
      responseText += `\n‚è∞ –¢–∞–π–º–µ—Ä: ${timer}`;
    }
    responseText += '\n\nüí° –¢–µ–ø–µ—Ä—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ.';

    await ctx.reply(responseText);

  } catch (error) {
    console.error('Setup command error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
};

const handleUnsetupCommand = async (ctx: BotContext) => {
  const args = ctx.message?.text?.split(' ').slice(1) || [];

  try {
    // Check admin permissions
    const member = await ctx.api.getChatMember(ctx.chat.id, ctx.from!.id);
    if (!['creator', 'administrator'].includes(member.status)) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.');
      return;
    }

    const subscriptionService = await import('../services/subscriptionService');
    
    if (args.length === 0) {
      // Remove all checks
      const count = await subscriptionService.subscriptionService.removeSubscriptionCheck(
        ctx.chat.id,
        undefined,
        ctx.from!.id
      );
      
      await ctx.reply(`‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (${count} —à—Ç.)`);
    } else {
      // Remove specific check
      const target = args[0];
      const count = await subscriptionService.subscriptionService.removeSubscriptionCheck(
        ctx.chat.id,
        target,
        ctx.from!.id
      );
      
      await ctx.reply(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${target} –æ—Ç–∫–ª—é—á–µ–Ω–∞`);
    }

  } catch (error) {
    console.error('Unsetup command error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
};

const handleStatusCommand = async (ctx: BotContext) => {
  try {
    const subscriptionService = await import('../services/subscriptionService');
    const checks = await subscriptionService.subscriptionService.getSubscriptionStatus(ctx.chat.id);

    if (checks.length === 0) {
      await ctx.reply('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      return;
    }

    let statusText = 'üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n';
    
    checks.forEach((check, index) => {
      statusText += `${index + 1}. **${check.title || check.target}**\n`;
      statusText += `   –¢–∏–ø: ${getCheckTypeText(check.type)}\n`;
      if (check.expiresAt) {
        statusText += `   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDate(check.expiresAt)}\n`;
      }
      if (check.subscriberGoal) {
        statusText += `   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${check.currentSubscribers}/${check.subscriberGoal}\n`;
      }
      statusText += `   –°–æ–∑–¥–∞–Ω–æ: ${formatDate(check.createdAt)}\n\n`;
    });

    await ctx.reply(statusText, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('Status command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫.');
  }
};

const handleSetupBotCommand = async (ctx: BotContext) => {
  const args = ctx.message?.text?.split(' ').slice(1) || [];
  
  if (args.length === 0) {
    await ctx.reply(
      'üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/setup_bot USER_ID - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É\n' +
      '/setup_bot USER_ID 1d - —Å —Ç–∞–π–º–µ—Ä–æ–º –Ω–∞ 1 –¥–µ–Ω—å\n\n' +
      '–í–∞—à ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"'
    );
    return;
  }

  try {
    const userId = parseInt(args[0]);
    if (isNaN(userId)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }

    const timer = args[1];
    let timerSeconds = 0;
    if (timer) {
      timerSeconds = parseTimer(timer);
      if (timerSeconds === 0) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.');
        return;
      }
    }

    // Check admin permissions
    const member = await ctx.api.getChatMember(ctx.chat.id, ctx.from!.id);
    if (!['creator', 'administrator'].includes(member.status)) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.');
      return;
    }

    const subscriptionService = await import('../services/subscriptionService');
    await subscriptionService.subscriptionService.setupSubscriptionCheck(
      ctx.chat.id,
      {
        type: 'referral_bot',
        target: userId.toString(),
        timer: timerSeconds,
        createdBy: ctx.from!.id
      }
    );

    let responseText = `‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\nüë§ –†–µ—Ñ–µ—Ä–µ—Ä ID: ${userId}`;
    if (timer) {
      responseText += `\n‚è∞ –¢–∞–π–º–µ—Ä: ${timer}`;
    }
    responseText += '\n\nüí° –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';

    await ctx.reply(responseText);

  } catch (error) {
    console.error('Setup bot command error:', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
};

const handleUnsetupBotCommand = async (ctx: BotContext) => {
  try {
    // Check admin permissions
    const member = await ctx.api.getChatMember(ctx.chat.id, ctx.from!.id);
    if (!['creator', 'administrator'].includes(member.status)) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.');
      return;
    }

    // Remove referral bot checks
    const subscriptionService = await import('../services/subscriptionService');
    await subscriptionService.subscriptionService.removeSubscriptionCheck(
      ctx.chat.id,
      undefined, // Will remove all referral_bot type checks
      ctx.from!.id
    );

    await ctx.reply('‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.');

  } catch (error) {
    console.error('Unsetup bot command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
  }
};

const handleAutoDeleteCommand = async (ctx: BotContext) => {
  const args = ctx.message?.text?.split(' ').slice(1) || [];
  
  if (args.length === 0) {
    await ctx.reply(
      'üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/autodelete 30s - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥\n' +
      '/autodelete 2m - —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã\n' +
      '/autodelete off - –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: 15s - 5m'
    );
    return;
  }

  try {
    // Check admin permissions
    const member = await ctx.api.getChatMember(ctx.chat.id, ctx.from!.id);
    if (!['creator', 'administrator'].includes(member.status)) {
      await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ.');
      return;
    }

    const setting = args[0].toLowerCase();
    
    if (setting === 'off') {
      // Disable auto-delete
      await ctx.reply('‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ.');
    } else {
      const seconds = parseTimer(setting);
      if (seconds === 0 || seconds < 15 || seconds > 300) {
        await ctx.reply('‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 15 —Å–µ–∫—É–Ω–¥ –¥–æ 5 –º–∏–Ω—É—Ç.');
        return;
      }

      await ctx.reply(`‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ ${setting}.\n\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`);
    }

  } catch (error) {
    console.error('Auto-delete command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è.');
  }
};

const handleGetAutoDeleteCommand = async (ctx: BotContext) => {
  try {
    // Get current auto-delete settings
    await ctx.reply('üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /autodelete –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
  } catch (error) {
    console.error('Get auto-delete command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è.');
  }
};

// Utility functions
const parseTimer = (timerStr: string): number => {
  const match = timerStr.match(/^(\d+)([smhd])$/);
  if (!match) return 0;
  
  const value = parseInt(match[1]);
  const unit = match[2];
  
  switch (unit) {
    case 's': return value;
    case 'm': return value * 60;
    case 'h': return value * 60 * 60;
    case 'd': return value * 24 * 60 * 60;
    default: return 0;
  }
};

const getCheckTypeText = (type: string): string => {
  const types = {
    public_channel: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª',
    private_channel: '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª',
    invite_link: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
    referral_bot: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–æ—Ç–∞'
  };
  return types[type as keyof typeof types] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

const formatDate = (date: Date): string => {
  return date.toLocaleString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};