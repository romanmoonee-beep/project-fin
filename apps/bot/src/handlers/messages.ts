import { Composer, InlineKeyboard } from 'grammy';
import { subscriptionService } from '../services/subscriptionService';
import type { BotContext } from '../types/context';

export const messageHandler = new Composer<BotContext>();

// Handle all messages in groups/channels for subscription checking
messageHandler.on('message', async (ctx, next) => {
  // Skip private chats
  if (ctx.chat.type === 'private') {
    return next();
  }

  // Skip bot messages
  if (ctx.from?.is_bot) {
    return next();
  }

  // Skip if no user found
  if (!ctx.from) {
    return next();
  }

  try {
    // Check subscription requirements
    const checkResult = await subscriptionService.checkUserSubscriptions(
      ctx.from.id,
      ctx.chat.id
    );

    if (!checkResult.passed && checkResult.requiresAction) {
      // Delete user message
      try {
        await ctx.deleteMessage();
      } catch (error) {
        console.error('Failed to delete message:', error);
      }

      // Send subscription requirement message
      const keyboard = generateSubscriptionKeyboard(checkResult.failed);
      
      const sentMessage = await ctx.reply(
        checkResult.message || '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã',
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );

      // Auto-delete the bot message after configured time
      const autoDeleteTimer = await getAutoDeleteTimer(ctx.chat.id);
      if (autoDeleteTimer > 0) {
        setTimeout(async () => {
          try {
            await ctx.api.deleteMessage(ctx.chat.id, sentMessage.message_id);
          } catch (error) {
            console.error('Failed to auto-delete message:', error);
          }
        }, autoDeleteTimer * 1000);
      }

      return; // Don't call next()
    }

    // User passed all checks, continue
    return next();

  } catch (error) {
    console.error('Subscription check error:', error);
    return next();
  }
});

// Handle subscription check button clicks
messageHandler.callbackQuery(/^sub_check:(.+)$/, async (ctx) => {
  const action = ctx.match[1];
  
  if (action === 'recheck') {
    await handleSubscriptionRecheck(ctx);
  } else if (action.startsWith('channel:')) {
    const channelId = action.replace('channel:', '');
    await handleChannelRedirect(ctx, channelId);
  }
});

// Handle subscription recheck
async function handleSubscriptionRecheck(ctx: BotContext) {
  try {
    await ctx.answerCallbackQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...');

    const checkResult = await subscriptionService.checkUserSubscriptions(
      ctx.from!.id,
      ctx.chat!.id
    );

    if (checkResult.passed) {
      // User passed all checks
      await ctx.editMessageText(
        '‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ.',
        { parse_mode: 'HTML' }
      );

      // Auto-delete success message after 5 seconds
      setTimeout(async () => {
        try {
          await ctx.deleteMessage();
        } catch (error) {
          console.error('Failed to delete success message:', error);
        }
      }, 5000);

    } else {
      // User still hasn't met requirements
      const keyboard = generateSubscriptionKeyboard(checkResult.failed);
      
      await ctx.editMessageText(
        checkResult.message || '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã',
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );
    }

  } catch (error) {
    console.error('Subscription recheck error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫');
  }
}

// Handle channel redirect
async function handleChannelRedirect(ctx: BotContext, channelData: string) {
  try {
    // Decode channel data (could be username or invite link)
    const [type, identifier] = channelData.split('|');
    
    let url = '';
    if (type === 'username') {
      url = `https://t.me/${identifier}`;
    } else if (type === 'invite') {
      url = identifier; // Already a full URL
    } else if (type === 'referral') {
      url = `https://t.me/prgram_bot?start=${identifier}`;
    }

    if (url) {
      await ctx.answerCallbackQuery(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞–Ω–∞–ª—É...`);
      // The inline button will handle the actual redirect
    } else {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª');
    }

  } catch (error) {
    console.error('Channel redirect error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–∞–Ω–∞–ª—É');
  }
}

// Generate subscription keyboard
function generateSubscriptionKeyboard(failedChecks: any[]): InlineKeyboard {
  const keyboard = new InlineKeyboard();

  failedChecks.forEach((check, index) => {
    let buttonText = '';
    let url = '';
    let callbackData = '';

    switch (check.setupType) {
      case 'public_channel':
        buttonText = `üì∫ ${check.targetTitle || check.targetUsername || '–ö–∞–Ω–∞–ª'}`;
        url = `https://t.me/${check.targetUsername?.replace('@', '')}`;
        break;

      case 'private_channel':
      case 'invite_link':
        buttonText = `üîí ${check.targetTitle || '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'}`;
        url = check.inviteLink || '';
        break;

      case 'referral_bot':
        buttonText = `üéØ PR GRAM Bot (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)`;
        url = `https://t.me/prgram_bot?start=${check.settings?.referralUserId}`;
        break;

      default:
        buttonText = `üì∫ –ö–∞–Ω–∞–ª ${index + 1}`;
    }

    if (url) {
      keyboard.url(buttonText, url);
    } else {
      keyboard.text(buttonText, `sub_check:channel:${check.setupType}|${check.targetUsername || check.targetChatId}`);
    }

    keyboard.row();
  });

  // Add recheck button
  keyboard.text('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'sub_check:recheck');

  return keyboard;
}

// Get auto-delete timer for chat
async function getAutoDeleteTimer(chatId: number): Promise<number> {
  try {
    // This would normally fetch from database
    // For now, return default of 30 seconds
    return 30;
  } catch (error) {
    console.error('Get auto-delete timer error:', error);
    return 30; // Default fallback
  }
}

// Handle file uploads (for task proof)
messageHandler.on(':photo', async (ctx, next) => {
  if (ctx.chat.type !== 'private') {
    return next();
  }

  // Check if user is in a conversation that expects file upload
  const session = ctx.session;
  if (session.step && session.step.includes('upload')) {
    await handleFileUpload(ctx, 'photo');
    return;
  }

  return next();
});

messageHandler.on(':document', async (ctx, next) => {
  if (ctx.chat.type !== 'private') {
    return next();
  }

  const session = ctx.session;
  if (session.step && session.step.includes('upload')) {
    await handleFileUpload(ctx, 'document');
    return;
  }

  return next();
});

// Handle file upload for task proof
async function handleFileUpload(ctx: BotContext, type: 'photo' | 'document') {
  try {
    let fileId = '';
    let fileName = '';
    let fileSize = 0;

    if (type === 'photo') {
      const photo = ctx.message?.photo;
      if (!photo || photo.length === 0) return;
      
      // Get the largest photo
      const largestPhoto = photo.reduce((prev, current) => 
        (prev.file_size || 0) > (current.file_size || 0) ? prev : current
      );
      
      fileId = largestPhoto.file_id;
      fileName = `photo_${Date.now()}.jpg`;
      fileSize = largestPhoto.file_size || 0;

    } else if (type === 'document') {
      const document = ctx.message?.document;
      if (!document) return;

      fileId = document.file_id;
      fileName = document.file_name || `document_${Date.now()}`;
      fileSize = document.file_size || 0;

      // Check file type
      const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'application/pdf'];
      if (document.mime_type && !allowedTypes.includes(document.mime_type)) {
        await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF —Ñ–∞–π–ª—ã.');
        return;
      }
    }

    // Check file size (max 20MB)
    if (fileSize > 20 * 1024 * 1024) {
      await ctx.reply('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.');
      return;
    }

    // Store file info in session
    if (!ctx.session.uploadedFiles) {
      ctx.session.uploadedFiles = [];
    }

    const fileInfo = {
      fileId,
      fileName,
      fileSize,
      uploadedAt: new Date().toISOString()
    };

    ctx.session.uploadedFiles.push(JSON.stringify(fileInfo));

    const keyboard = new InlineKeyboard()
      .text('üì§ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª', 'upload:add_more')
      .text('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É', 'upload:finish')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'upload:cancel');

    await ctx.reply(
      `‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: <b>${fileName}</b>\n\n` +
      `üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${ctx.session.uploadedFiles.length}\n\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.`,
      {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      }
    );

  } catch (error) {
    console.error('File upload error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// Handle upload action buttons
messageHandler.callbackQuery(/^upload:(.+)$/, async (ctx) => {
  const action = ctx.match[1];

  switch (action) {
    case 'add_more':
      await ctx.answerCallbackQuery();
      await ctx.editMessageText(
        'üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF)',
        { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'upload:cancel') }
      );
      break;

    case 'finish':
      await handleUploadFinish(ctx);
      break;

    case 'cancel':
      await handleUploadCancel(ctx);
      break;
  }
});

// Handle upload finish
async function handleUploadFinish(ctx: BotContext) {
  try {
    const uploadedFiles = ctx.session.uploadedFiles || [];
    
    if (uploadedFiles.length === 0) {
      await ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
      return;
    }

    await ctx.answerCallbackQuery('‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');

    // Get task ID from session
    const taskId = ctx.session.data?.taskId;
    if (!taskId) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // Submit task execution with proof
    try {
      const fileUrls = uploadedFiles.map(fileStr => {
        const fileInfo = JSON.parse(fileStr);
        return `https://api.telegram.org/file/bot${ctx.api.token}/${fileInfo.fileId}`;
      });

      await taskService.executeTask(
        ctx.user.telegramId,
        taskId,
        {
          screenshotUrls: fileUrls,
          description: '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è',
          metadata: {
            uploadedFiles: uploadedFiles.map(f => JSON.parse(f)),
            uploadedAt: new Date().toISOString()
          }
        }
      );

      const successText = `
üì§ <b>–°–ö–†–ò–ù–®–û–¢ –û–¢–ü–†–ê–í–õ–ï–ù</b>

‚úÖ –ó–∞–¥–∞–Ω–∏–µ #${taskId.slice(-6)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

‚è∞ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
‚îú –§–∞–π–ª–æ–≤: ${uploadedFiles.length}
‚îî –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞

üí° –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ.

üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'menu:earn')
        .text('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.editMessageText(successText, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });

      // Clear session data
      ctx.session.uploadedFiles = [];
      ctx.session.step = 'idle';
      delete ctx.session.data?.taskId;

    } catch (error) {
      console.error('Submit task execution error:', error);
      await ctx.editMessageText(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        { reply_markup: new InlineKeyboard().text('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'upload:finish') }
      );
    }

  } catch (error) {
    console.error('Upload finish error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
}

// Handle upload cancel
async function handleUploadCancel(ctx: BotContext) {
  await ctx.answerCallbackQuery('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
  
  // Clear session data
  ctx.session.uploadedFiles = [];
  ctx.session.step = 'idle';
  delete ctx.session.data?.taskId;

  const keyboard = new InlineKeyboard()
    .text('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', 'menu:earn')
    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(
    '‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞',
    { reply_markup: keyboard }
  );
}

// Handle text messages in private chat (for conversations)
messageHandler.on(':text', async (ctx, next) => {
  if (ctx.chat.type !== 'private') {
    return next();
  }

  // Check if user is in a conversation that expects text input
  const session = ctx.session;
  if (session.step && session.step !== 'idle') {
    // Let conversations handle the text input
    return next();
  }

  // Handle standalone text messages
  const text = ctx.message.text.toLowerCase();
  
  if (text.includes('–ø–æ–º–æ—â—å') || text.includes('help')) {
    await ctx.reply(
      'üÜò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –±–æ—Ç—É',
      { reply_markup: new InlineKeyboard().text('üìã –ü–æ–º–æ—â—å', 'help') }
    );
  } else if (text.includes('–º–µ–Ω—é') || text.includes('menu')) {
    await ctx.reply(
      'üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é',
      { reply_markup: new InlineKeyboard().text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main') }
    );
  } else {
    // Unknown text message
    await ctx.reply(
      'ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.',
      { 
        reply_markup: new InlineKeyboard()
          .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main')
          .text('üÜò –ü–æ–º–æ—â—å', 'help')
      }
    );
  }
});

// Handle callback queries that don't match other patterns
messageHandler.on('callback_query', async (ctx, next) => {
  const data = ctx.callbackQuery.data;
  
  if (data === 'noop' || data === 'ignore') {
    await ctx.answerCallbackQuery();
    return;
  }

  if (data === 'help') {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('showHelp');
    return;
  }

  // Let other handlers process the callback query
  return next();
});