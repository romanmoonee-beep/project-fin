import { Composer, InlineKeyboard } from 'grammy';
import { checkService } from '../services/checkService';
import { BOT_CONSTANTS } from '../config';
import type { BotContext } from '../types/context';

export const checkHandler = new Composer<BotContext>();

// Show checks menu
checkHandler.callbackQuery('menu:checks', async (ctx) => {
  const balance = ctx.user.balance;
  
  const checksText = `
üí≥ <b>–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í</b>

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${balance} GRAM

üí° <b>–¢–∏–ø—ã —á–µ–∫–æ–≤:</b>
`;

  const keyboard = new InlineKeyboard()
    .text('üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫\n–î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'checks:create:personal').row()
    .text('üë• –ú—É–ª—å—Ç–∏-—á–µ–∫\n–î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–µ–ª–æ–≤–µ–∫', 'checks:create:multi').row()
    .text('üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —á–µ–∫\n–° –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º', 'checks:create:gift').row()
    .text('üîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —á–µ–∫\n–° –ø–∞—Ä–æ–ª–µ–º', 'checks:create:protected').row()
    .text('üìä –ú–æ–∏ —á–µ–∫–∏', 'checks:my_checks')
    .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'checks:statistics')
    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(checksText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
});

// Create check handlers
checkHandler.callbackQuery(/^checks:create:(.+)$/, async (ctx) => {
  const checkType = ctx.match[1];
  
  // Validate check type
  const validTypes = ['personal', 'multi', 'gift', 'protected'];
  if (!validTypes.includes(checkType)) {
    await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —á–µ–∫–∞');
    return;
  }

  // Start check creation conversation
  ctx.session.checkData = { type: checkType };
  await ctx.conversation.enter('createCheck');
});

// Show user's checks
checkHandler.callbackQuery('checks:my_checks', async (ctx) => {
  await showMyChecks(ctx);
});

// Show user's checks
async function showMyChecks(ctx: BotContext, page = 1) {
  try {
    const checks = await checkService.getUserChecks(ctx.user.telegramId, page, 10);

    if (checks.checks.length === 0) {
      await ctx.editMessageText(
        'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–∫–∞.',
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:checks') }
      );
      return;
    }

    let text = `üìä <b>–ú–û–ò –ß–ï–ö–ò</b>\n\n–í—Å–µ–≥–æ: ${checks.total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${checks.totalPages}\n\n`;
    
    checks.checks.forEach((check, index) => {
      const statusEmoji = check.isActive ? 'üü¢' : 'üî¥';
      const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
      
      text += `${statusEmoji} ${typeEmoji} <b>${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</b>\n`;
      text += `‚îú –°—É–º–º–∞: ${check.amount} GRAM\n`;
      text += `‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–∏: ${check.currentActivations}/${check.maxActivations}\n`;
      text += `‚îú –°–æ–∑–¥–∞–Ω: ${formatDate(check.createdAt)}\n`;
      if (check.expiresAt) {
        text += `‚îú –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDate(check.expiresAt)}\n`;
      }
      text += `‚îî ID: #${check.id.slice(-6)}\n\n`;
    });

    const keyboard = new InlineKeyboard();
    
    // Add check management buttons
    checks.checks.forEach((check, index) => {
      const statusIcon = check.isActive ? 'üü¢' : 'üî¥';
      const title = check.comment || `–ß–µ–∫ #${check.id.slice(-6)}`;
      keyboard.text(
        `${statusIcon} ${title.substring(0, 25)}${title.length > 25 ? '...' : ''}`,
        `check:manage:${check.id}`
      ).row();
    });

    // Pagination
    if (checks.totalPages > 1) {
      const paginationRow = [];
      if (checks.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `checks:my_checks:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${checks.totalPages}`, callback_data: 'noop' });
      if (checks.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `checks:my_checks:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫', 'menu:checks')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Show my checks error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–æ–≤');
  }
}

// Pagination for my checks
checkHandler.callbackQuery(/^checks:my_checks:(\d+)$/, async (ctx) => {
  const page = parseInt(ctx.match[1]);
  await showMyChecks(ctx, page);
});

// Check management
checkHandler.callbackQuery(/^check:manage:(.+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  await showCheckManagement(ctx, checkId);
});

// Show check management interface
async function showCheckManagement(ctx: BotContext, checkId: string) {
  try {
    const check = await checkService.getCheckDetails(checkId);
    
    if (check.createdBy !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à —á–µ–∫');
      return;
    }

    const statusEmoji = check.isActive ? 'üü¢' : 'üî¥';
    const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
    
    let text = `${statusEmoji} <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–û–ú</b>\n\n`;
    text += `${typeEmoji} <b>${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</b>\n\n`;
    
    text += `üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n`;
    text += `‚îú –°—É–º–º–∞: ${check.amount} GRAM\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–∏: ${check.currentActivations}/${check.maxActivations}\n`;
    text += `‚îú –û—Å—Ç–∞–≤—à–∏–µ—Å—è: ${check.maxActivations - check.currentActivations}\n`;
    text += `‚îú –°—Ç–∞—Ç—É—Å: ${check.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`;
    text += `‚îú –ó–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º: ${check.password ? '–î–∞' : '–ù–µ—Ç'}\n`;
    text += `‚îú –°–æ–∑–¥–∞–Ω: ${formatDate(check.createdAt)}\n`;
    if (check.expiresAt) {
      text += `‚îú –ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDate(check.expiresAt)}\n`;
    }
    text += `‚îî ID: #${check.id.slice(-6)}\n\n`;

    if (check.activations && check.activations.length > 0) {
      text += `üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n`;
      check.activations.slice(0, 3).forEach((activation, index) => {
        const userInfo = activation.user?.username ? `@${activation.user.username}` : activation.user?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        text += `‚îú ${userInfo}: ${activation.amount} GRAM\n`;
      });
      if (check.activations.length > 3) {
        text += `‚îî ...–∏ –µ—â–µ ${check.activations.length - 3}\n\n`;
      } else {
        text += '\n';
      }
    }

    const keyboard = new InlineKeyboard()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `check:stats:${checkId}`)
      .text('üë• –ê–∫—Ç–∏–≤–∞—Ü–∏–∏', `check:activations:${checkId}`).row();

    if (check.isActive && check.currentActivations < check.maxActivations) {
      keyboard.text('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `check:share:${checkId}`)
        .text('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', `check:pause:${checkId}`).row();
    } else if (!check.isActive) {
      keyboard.text('‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', `check:activate:${checkId}`);
    }

    if (check.currentActivations === 0) {
      keyboard.text('‚ùå –£–¥–∞–ª–∏—Ç—å', `check:delete:${checkId}`).row();
    }

    keyboard.text('‚¨ÖÔ∏è –ö –º–æ–∏–º —á–µ–∫–∞–º', 'checks:my_checks:1');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Check management error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
}

// Check statistics
checkHandler.callbackQuery(/^check:stats:(.+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  
  try {
    const check = await checkService.getCheckDetails(checkId);
    const stats = await checkService.getCheckStatistics(checkId);
    
    if (check.createdBy !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à —á–µ–∫');
      return;
    }

    const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
    
    let text = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ï–ö–ê</b>\n\n`;
    text += `${typeEmoji} <b>${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</b>\n\n`;
    
    text += `üìà <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${check.currentActivations}/${check.maxActivations}\n`;
    text += `‚îú –í—ã–¥–∞–Ω–æ GRAM: ${check.currentActivations * check.amount}\n`;
    text += `‚îú –û—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞: ${(check.maxActivations - check.currentActivations) * check.amount}\n`;
    text += `‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${Math.round((check.currentActivations / check.maxActivations) * 100)}%\n`;
    
    if (stats) {
      text += `‚îú –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${stats.views || 0}\n`;
      text += `‚îú –ö–ª–∏–∫–∏: ${stats.clicks || 0}\n`;
      if (stats.views > 0) {
        text += `‚îú CTR: ${Math.round((stats.clicks / stats.views) * 100)}%\n`;
      }
      if (stats.clicks > 0) {
        text += `‚îú –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${Math.round((check.currentActivations / stats.clicks) * 100)}%\n`;
      }
    }
    
    text += `‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${stats?.averageActivationTime || 0} —Å–µ–∫\n\n`;

    if (stats?.topCountries && stats.topCountries.length > 0) {
      text += `üåç <b>–¢–æ–ø —Å—Ç—Ä–∞–Ω:</b>\n`;
      stats.topCountries.slice(0, 3).forEach((country, index) => {
        text += `‚îú ${country.country}: ${country.activations} (${country.percentage}%)\n`;
      });
      text += '\n';
    }

    const keyboard = new InlineKeyboard()
      .text('üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', `check:activations:${checkId}`)
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `check:manage:${checkId}`);

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Check stats error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// Check activations
checkHandler.callbackQuery(/^check:activations:(.+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  await showCheckActivations(ctx, checkId, 1);
});

// Show check activations with pagination
async function showCheckActivations(ctx: BotContext, checkId: string, page = 1) {
  try {
    const check = await checkService.getCheckDetails(checkId);
    
    if (check.createdBy !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à —á–µ–∫');
      return;
    }

    const activations = await checkService.getCheckActivations(checkId, page, 10);

    if (activations.activations.length === 0) {
      await ctx.editMessageText(
        'üë• –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–∫–∞',
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `check:manage:${checkId}`) }
      );
      return;
    }

    const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
    
    let text = `üë• <b>–ê–ö–¢–ò–í–ê–¶–ò–ò –ß–ï–ö–ê</b>\n\n`;
    text += `${typeEmoji} <b>${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</b>\n`;
    text += `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${activations.totalPages}\n\n`;

    activations.activations.forEach((activation, index) => {
      const userInfo = activation.user?.username ? `@${activation.user.username}` : activation.user?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const location = activation.location?.country ? ` (${activation.location.country})` : '';
      
      text += `üí∞ <b>${userInfo}</b>${location}\n`;
      text += `‚îú –°—É–º–º–∞: ${activation.amount} GRAM\n`;
      text += `‚îú –î–∞—Ç–∞: ${formatDateTime(activation.activatedAt)}\n`;
      if (activation.ipAddress) {
        text += `‚îî IP: ${activation.ipAddress.substring(0, 10)}...\n\n`;
      } else {
        text += '\n';
      }
    });

    const keyboard = new InlineKeyboard();

    // Pagination
    if (activations.totalPages > 1) {
      const paginationRow = [];
      if (activations.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `check:activations:${checkId}:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${activations.totalPages}`, callback_data: 'noop' });
      if (activations.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `check:activations:${checkId}:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `check:stats:${checkId}`)
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `check:manage:${checkId}`);

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Check activations error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–π');
  }
}

// Activations pagination
checkHandler.callbackQuery(/^check:activations:(.+):(\d+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  const page = parseInt(ctx.match[2]);
  await showCheckActivations(ctx, checkId, page);
});

// Check actions
checkHandler.callbackQuery(/^check:(share|pause|activate|delete):(.+)$/, async (ctx) => {
  const action = ctx.match[1];
  const checkId = ctx.match[2];
  
  try {
    const check = await checkService.getCheckDetails(checkId);
    
    if (check.createdBy !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à —á–µ–∫');
      return;
    }

    switch (action) {
      case 'share':
        await shareCheck(ctx, check);
        return;
      case 'pause':
        await checkService.updateCheck(checkId, { isActive: false });
        await ctx.answerCallbackQuery('‚è∏Ô∏è –ß–µ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        break;
      case 'activate':
        await checkService.updateCheck(checkId, { isActive: true });
        await ctx.answerCallbackQuery('‚ñ∂Ô∏è –ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        break;
      case 'delete':
        // Confirm deletion
        const confirmKeyboard = new InlineKeyboard()
          .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `check:confirm_delete:${checkId}`)
          .text('‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', `check:manage:${checkId}`);
        
        await ctx.editMessageText(
          '‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ–∫?\n\n' +
          '‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n' +
          '‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è',
          { 
            reply_markup: confirmKeyboard,
            parse_mode: 'HTML'
          }
        );
        return;
    }

    // Refresh check management view
    await showCheckManagement(ctx, checkId);

  } catch (error) {
    console.error('Check action error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
});

// Share check
async function shareCheck(ctx: BotContext, check: any) {
  const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
  const checkUrl = `https://t.me/prgram_bot?start=check_${check.id}`;
  
  let shareText = `${typeEmoji} <b>–ü–û–î–ï–õ–ò–¢–¨–°–Ø –ß–ï–ö–û–ú</b>\n\n`;
  shareText += `üí∞ <b>–°—É–º–º–∞:</b> ${check.amount} GRAM\n`;
  shareText += `üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> ${check.currentActivations}/${check.maxActivations}\n`;
  if (check.comment) {
    shareText += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${check.comment}\n`;
  }
  shareText += `\nüîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>\n<code>${checkUrl}</code>\n\n`;
  shareText += `üì§ <b>–ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>\n\n`;
  
  const readyMessage = `${typeEmoji} ${check.comment || '–ß–µ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ GRAM'}\n\n` +
    `üí∞ –°—É–º–º–∞: ${check.amount} GRAM\n` +
    `üë• –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${check.maxActivations - check.currentActivations}\n\n` +
    `üéÅ –ü–æ–ª—É—á–∏—Ç—å: ${checkUrl}`;
  
  shareText += `<code>${readyMessage}</code>`;

  const keyboard = new InlineKeyboard()
    .url('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç', `https://t.me/share/url?url=${encodeURIComponent(checkUrl)}&text=${encodeURIComponent(readyMessage)}`)
    .text('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', `copy:${checkUrl}`).row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `check:manage:${check.id}`);

  await ctx.editMessageText(shareText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery('üì§ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
}

// Confirm check deletion
checkHandler.callbackQuery(/^check:confirm_delete:(.+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  
  try {
    await checkService.deleteCheck(checkId, ctx.user.telegramId);

    await ctx.editMessageText(
      `‚úÖ <b>–ß–ï–ö –£–î–ê–õ–ï–ù</b>\n\n` +
      `–ß–µ–∫ #${checkId.slice(-6)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n` +
      `üí° –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`,
      { 
        reply_markup: new InlineKeyboard().text('üìä –ú–æ–∏ —á–µ–∫–∏', 'checks:my_checks:1'),
        parse_mode: 'HTML'
      }
    );
    
    await ctx.answerCallbackQuery('‚úÖ –ß–µ–∫ —É–¥–∞–ª–µ–Ω');

  } catch (error) {
    console.error('Check deletion error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
});

// Show check statistics
checkHandler.callbackQuery('checks:statistics', async (ctx) => {
  await showCheckStatistics(ctx);
});

// Show user's check statistics
async function showCheckStatistics(ctx: BotContext) {
  try {
    const userStats = await checkService.getUserCheckStatistics(ctx.user.telegramId);
    
    let text = `üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ï–ö–û–í</b>\n\n`;
    
    text += `üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ–∫–æ–≤: ${userStats.totalChecks}\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤: ${userStats.activeChecks}\n`;
    text += `‚îú –û–±—â–∞—è —Å—É–º–º–∞: ${userStats.totalAmount} GRAM\n`;
    text += `‚îú –í—ã–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —á–µ–∫–∏: ${userStats.totalDistributed} GRAM\n`;
    text += `‚îú –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${userStats.totalActivations}\n`;
    text += `‚îî –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —á–µ–∫–∞: ${Math.round(userStats.averageAmount)} GRAM\n\n`;
    
    if (userStats.popularDesigns && userStats.popularDesigns.length > 0) {
      text += `üé® <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã:</b>\n`;
      userStats.popularDesigns.slice(0, 3).forEach((design, index) => {
        text += `‚îú ${design.emoji} ${design.color}: ${design.count} —á–µ–∫–æ–≤\n`;
      });
      text += '\n';
    }
    
    if (userStats.dailyStats && userStats.dailyStats.length > 0) {
      text += `üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:</b>\n`;
      userStats.dailyStats.slice(-3).forEach(day => {
        text += `‚îú ${day.date}: ${day.checksCreated} —á–µ–∫–æ–≤, ${day.activations} –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n`;
      });
    }

    const keyboard = new InlineKeyboard()
      .text('üìä –ú–æ–∏ —á–µ–∫–∏', 'checks:my_checks:1')
      .text('‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫', 'menu:checks')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Check statistics error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

// Handle check activation from start parameter
checkHandler.callbackQuery(/^activate_check:(.+)$/, async (ctx) => {
  const checkId = ctx.match[1];
  await activateCheck(ctx, checkId);
});

// Activate check
async function activateCheck(ctx: BotContext, checkId: string) {
  try {
    const check = await checkService.getCheckDetails(checkId);
    
    if (!check.isActive) {
      await ctx.answerCallbackQuery('‚ùå –ß–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      return;
    }

    if (check.currentActivations >= check.maxActivations) {
      await ctx.answerCallbackQuery('‚ùå –í—Å–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã');
      return;
    }

    if (check.expiresAt && check.expiresAt < new Date()) {
      await ctx.answerCallbackQuery('‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–∫–∞ –∏—Å—Ç–µ–∫');
      return;
    }

    // Check if user already activated this check
    const hasActivated = await checkService.hasUserActivatedCheck(checkId, ctx.user.telegramId);
    if (hasActivated) {
      await ctx.answerCallbackQuery('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫');
      return;
    }

    if (check.password) {
      // Start password entry conversation
      ctx.session.checkData = { checkId, action: 'activate' };
      await ctx.conversation.enter('activateCheck');
      return;
    }

    // Activate check without password
    const result = await checkService.activateCheck(checkId, ctx.user.telegramId);
    
    if (result.success) {
      const typeEmoji = getCheckTypeEmoji(check.design?.emoji || 'üí∞');
      
      const successText = `
üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

${typeEmoji} ${check.comment || '–ß–µ–∫ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}

üí∞ +${result.amount} GRAM –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å

üìä <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.balance.toNumber() + result.amount} GRAM

üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞!
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ', 'menu:earn')
        .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.editMessageText(successText, { 
        reply_markup: keyboard,
        parse_mode: 'HTML' 
      });
      await ctx.answerCallbackQuery('üéâ –ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    } else {
      await ctx.answerCallbackQuery(`‚ùå ${result.message}`);
    }

  } catch (error) {
    console.error('Check activation error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'}`);
  }
}

// Handle copy actions
checkHandler.callbackQuery(/^copy:(.+)$/, async (ctx) => {
  const textToCopy = ctx.match[1];
  await ctx.answerCallbackQuery(`üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ: ${textToCopy}`, { show_alert: true });
});

// Utility functions
function getCheckTypeEmoji(emoji: string): string {
  // Validate emoji or use default
  const emojiRegex = /(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])/;
  return emojiRegex.test(emoji) ? emoji : 'üí∞';
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}