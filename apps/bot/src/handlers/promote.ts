import { Composer, InlineKeyboard } from 'grammy';
import { taskService } from '../services/taskService';
import { TASK_TYPE_CONFIG } from '@pr-gram/shared';
import { TaskType } from '@pr-gram/database';
import type { BotContext } from '../types/context';

export const promoteHandler = new Composer<BotContext>();

// Show promote menu
promoteHandler.callbackQuery('menu:promote', async (ctx) => {
  const userLevel = ctx.user.level;
  const commissionRate = getCommissionRate(userLevel);
  const balance = ctx.user.balance;
  
  const promoteText = `
üì¢ <b>–°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï</b>

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance} GRAM</b>
üèÜ –£—Ä–æ–≤–µ–Ω—å: <b>${userLevel} (–∫–æ–º–∏—Å—Å–∏—è ${commissionRate}%)</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:
`;

  const keyboard = new InlineKeyboard()
    .text(`üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\nüí∞ ${TASK_TYPE_CONFIG.subscribe.minReward}-${TASK_TYPE_CONFIG.subscribe.maxReward} GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ`, 'promote:subscribe').row()
    .text(`üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\nüí∞ ${TASK_TYPE_CONFIG.join_group.minReward}-${TASK_TYPE_CONFIG.join_group.maxReward} GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ`, 'promote:join_group').row()
    .text(`üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞\nüí∞ ${TASK_TYPE_CONFIG.view_post.minReward}-${TASK_TYPE_CONFIG.view_post.maxReward} GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ`, 'promote:view_post').row()
    .text(`ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞\nüí∞ ${TASK_TYPE_CONFIG.use_bot.minReward}-${TASK_TYPE_CONFIG.use_bot.maxReward} GRAM`, 'promote:use_bot').row()
    .text(`üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç\nüí∞ ${TASK_TYPE_CONFIG.react_post.minReward}-${TASK_TYPE_CONFIG.react_post.maxReward} GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ`, 'promote:react_post').row()
    .text(`‚≠ê –ü—Ä–µ–º–∏—É–º –±—É—Å—Ç\nüí∞ ${TASK_TYPE_CONFIG.premium_boost.minReward}-${TASK_TYPE_CONFIG.premium_boost.maxReward} GRAM`, 'promote:premium_boost').row()
    .text('üìä –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', 'promote:my_tasks')
    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(promoteText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
});

// Start task creation
promoteHandler.callbackQuery(/^promote:(.+)$/, async (ctx) => {
  const taskType = ctx.match[1];
  
  if (taskType === 'my_tasks') {
    await showMyTasks(ctx);
    return;
  }

  // Validate task type
  if (!Object.values(TaskType).includes(taskType as TaskType)) {
    await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è');
    return;
  }

  // Start task creation conversation
  ctx.session.taskData = { type: taskType };
  await ctx.conversation.enter('createTask');
});

// Show user's tasks
async function showMyTasks(ctx: BotContext, page = 1) {
  try {
    const tasks = await taskService.getUserTasks(ctx.user.telegramId, undefined, page, 10);

    if (tasks.tasks.length === 0) {
      await ctx.editMessageText(
        'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.',
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:promote') }
      );
      return;
    }

    let text = `üìä <b>–ú–û–ò –ó–ê–î–ê–ù–ò–Ø</b>\n\n–í—Å–µ–≥–æ: ${tasks.total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${tasks.totalPages}\n\n`;
    
    tasks.tasks.forEach((task, index) => {
      const statusEmoji = getTaskStatusEmoji(task.status);
      text += `${statusEmoji} <b>${task.title}</b>\n`;
      text += `‚îú –¢–∏–ø: ${getTaskTypeIcon(task.type)} ${getTaskTypeName(task.type)}\n`;
      text += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} GRAM\n`;
      text += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.completedCount}/${task.targetCount}\n`;
      text += `‚îî –°–æ–∑–¥–∞–Ω–æ: ${formatDate(task.createdAt)}\n\n`;
    });

    const keyboard = new InlineKeyboard();
    
    // Add task detail buttons
    tasks.tasks.forEach((task, index) => {
      keyboard.text(
        `${getTaskStatusEmoji(task.status)} ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}`,
        `task:manage:${task.id}`
      ).row();
    });

    // Pagination
    if (tasks.totalPages > 1) {
      const paginationRow = [];
      if (tasks.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `promote:my_tasks:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${tasks.totalPages}`, callback_data: 'noop' });
      if (tasks.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `promote:my_tasks:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', 'menu:promote')
      .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Show my tasks error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
  }
}

// Pagination for my tasks
promoteHandler.callbackQuery(/^promote:my_tasks:(\d+)$/, async (ctx) => {
  const page = parseInt(ctx.match[1]);
  await showMyTasks(ctx, page);
});

// Task management
promoteHandler.callbackQuery(/^task:manage:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await showTaskManagement(ctx, taskId);
});

// Show task management interface
async function showTaskManagement(ctx: BotContext, taskId: string) {
  try {
    const task = await taskService.getTaskDetails(taskId);
    
    if (task.authorId !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ');
      return;
    }

    const stats = await taskService.getTaskStatistics(taskId);
    const statusEmoji = getTaskStatusEmoji(task.status);
    
    let text = `${statusEmoji} <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ï–ú</b>\n\n`;
    text += `${getTaskTypeIcon(task.type)} <b>${task.title}</b>\n\n`;
    text += `üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n`;
    text += `‚îú –¢–∏–ø: ${getTaskTypeName(task.type)}\n`;
    text += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} GRAM\n`;
    text += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.completedCount}/${task.targetCount}\n`;
    text += `‚îú –°—Ç–∞—Ç—É—Å: ${getTaskStatusText(task.status)}\n`;
    text += `‚îî –°–æ–∑–¥–∞–Ω–æ: ${formatDate(task.createdAt)}\n\n`;
    
    if (stats) {
      text += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
      text += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.totalExecutions}\n`;
      text += `‚îú –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approvedExecutions}\n`;
      text += `‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejectedExecutions}\n`;
      text += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats.pendingExecutions}\n`;
      text += `‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${stats.approvalRate}%\n`;
      text += `‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: ${stats.completionRate}%\n`;
      text += `‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.spentAmount} GRAM\n`;
      text += `‚îî –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${stats.remainingBudget} GRAM\n\n`;
    }

    const keyboard = new InlineKeyboard()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `task:stats:${taskId}`)
      .text('üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è', `task:executions:${taskId}`).row();

    if (task.status === 'active') {
      keyboard.text('‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', `task:pause:${taskId}`)
        .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `task:cancel:${taskId}`).row();
    } else if (task.status === 'paused') {
      keyboard.text('‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', `task:resume:${taskId}`)
        .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `task:cancel:${taskId}`).row();
    }

    keyboard.text('‚¨ÖÔ∏è –ö –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º', 'promote:my_tasks:1');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Task management error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
}

// Task statistics
promoteHandler.callbackQuery(/^task:stats:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  
  try {
    const task = await taskService.getTaskDetails(taskId);
    const stats = await taskService.getTaskStatistics(taskId);
    
    if (task.authorId !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ');
      return;
    }

    let text = `üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n`;
    text += `${getTaskTypeIcon(task.type)} <b>${task.title}</b>\n\n`;
    
    text += `üìà <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.totalExecutions}\n`;
    text += `‚îú –û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approvedExecutions} (${stats.approvalRate}%)\n`;
    text += `‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejectedExecutions}\n`;
    text += `‚îú –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${stats.pendingExecutions}\n`;
    text += `‚îî –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: ${stats.completionRate}%\n\n`;
    
    text += `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n`;
    text += `‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.spentAmount} GRAM\n`;
    text += `‚îú –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${stats.remainingBudget} GRAM\n`;
    text += `‚îî –û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${stats.spentAmount + stats.remainingBudget} GRAM\n\n`;
    
    if (stats.averageCompletionTimeMs > 0) {
      const avgTime = Math.round(stats.averageCompletionTimeMs / 1000 / 60); // minutes
      text += `‚è±Ô∏è <b>–í—Ä–µ–º—è:</b>\n`;
      text += `‚îú –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${avgTime} –º–∏–Ω\n`;
      
      if (stats.estimatedCompletion) {
        text += `‚îî –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${formatDate(stats.estimatedCompletion)}\n\n`;
      }
    }

    const keyboard = new InlineKeyboard()
      .text('üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', `task:executions:${taskId}`)
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `task:manage:${taskId}`);

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Task stats error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// Task executions
promoteHandler.callbackQuery(/^task:executions:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await showTaskExecutions(ctx, taskId, 1);
});

// Show task executions with pagination
async function showTaskExecutions(ctx: BotContext, taskId: string, page = 1) {
  try {
    const task = await taskService.getTaskDetails(taskId);
    
    if (task.authorId !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ');
      return;
    }

    const executions = await taskService.getTaskExecutions(taskId, undefined, page, 5);

    if (executions.executions.length === 0) {
      await ctx.editMessageText(
        'üìù –ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `task:manage:${taskId}`) }
      );
      return;
    }

    let text = `üìù <b>–í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø</b>\n\n`;
    text += `${getTaskTypeIcon(task.type)} <b>${task.title}</b>\n`;
    text += `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${executions.totalPages}\n\n`;

    executions.executions.forEach((execution, index) => {
      const statusEmoji = getExecutionStatusEmoji(execution.status);
      const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
      
      text += `${statusEmoji} <b>${userInfo}</b>\n`;
      text += `‚îú –£—Ä–æ–≤–µ–Ω—å: ${getLevelEmoji(execution.user.level)} ${execution.user.level}\n`;
      text += `‚îú –°—Ç–∞—Ç—É—Å: ${getExecutionStatusText(execution.status)}\n`;
      text += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${execution.rewardAmount} GRAM\n`;
      text += `‚îî –î–∞—Ç–∞: ${formatDateTime(execution.createdAt)}\n\n`;
    });

    const keyboard = new InlineKeyboard();
    
    // Add execution detail buttons for pending ones
    executions.executions
      .filter(e => e.status === 'pending')
      .forEach(execution => {
        const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
        keyboard.text(
          `üîç ${userInfo}`,
          `execution:moderate:${execution.id}`
        ).row();
      });

    // Pagination
    if (executions.totalPages > 1) {
      const paginationRow = [];
      if (executions.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `task:executions:${taskId}:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${executions.totalPages}`, callback_data: 'noop' });
      if (executions.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `task:executions:${taskId}:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `task:manage:${taskId}`);

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Task executions error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π');
  }
}

// Execution pagination
promoteHandler.callbackQuery(/^task:executions:(.+):(\d+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  const page = parseInt(ctx.match[2]);
  await showTaskExecutions(ctx, taskId, page);
});

// Moderate execution
promoteHandler.callbackQuery(/^execution:moderate:(.+)$/, async (ctx) => {
  const executionId = ctx.match[1];
  await ctx.conversation.enter('moderateTask', { executionId });
});

// Task actions
promoteHandler.callbackQuery(/^task:(pause|resume|cancel):(.+)$/, async (ctx) => {
  const action = ctx.match[1];
  const taskId = ctx.match[2];
  
  try {
    const task = await taskService.getTaskDetails(taskId);
    
    if (task.authorId !== ctx.user.telegramId) {
      await ctx.answerCallbackQuery('‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ');
      return;
    }

    switch (action) {
      case 'pause':
        await taskService.updateTaskStatus(taskId, 'paused', ctx.user.telegramId);
        await ctx.answerCallbackQuery('‚è∏Ô∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        break;
      case 'resume':
        await taskService.updateTaskStatus(taskId, 'active', ctx.user.telegramId);
        await ctx.answerCallbackQuery('‚ñ∂Ô∏è –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        break;
      case 'cancel':
        // Confirm cancellation
        const confirmKeyboard = new InlineKeyboard()
          .text('‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å', `task:confirm_cancel:${taskId}`)
          .text('‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', `task:manage:${taskId}`);
        
        await ctx.editMessageText(
          '‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ú–ï–ù–´</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n' +
          '‚Ä¢ –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã\n' +
          '‚Ä¢ –ß–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ (–∫–æ–º–∏—Å—Å–∏—è 10%)\n' +
          '‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ',
          { 
            reply_markup: confirmKeyboard,
            parse_mode: 'HTML'
          }
        );
        return;
    }

    // Refresh task management view
    await showTaskManagement(ctx, taskId);

  } catch (error) {
    console.error('Task action error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
});

// Confirm task cancellation
promoteHandler.callbackQuery(/^task:confirm_cancel:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  
  try {
    const cancelledTask = await taskService.cancelTask(
      taskId, 
      ctx.user.telegramId, 
      '–û—Ç–º–µ–Ω–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º'
    );

    await ctx.editMessageText(
      `‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û</b>\n\n` +
      `${getTaskTypeIcon(cancelledTask.type)} <b>${cancelledTask.title}</b>\n\n` +
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã:\n` +
      `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ –æ—Ç–º–µ–Ω—ã: ${cancelledTask.completedCount}/${cancelledTask.targetCount}\n` +
      `‚îú –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: ${cancelledTask.metadata?.cancellation?.refundAmount || 0} GRAM\n` +
      `‚îî –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ—Ç–º–µ–Ω—É: 10%\n\n` +
      `–í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.`,
      { 
        reply_markup: new InlineKeyboard().text('üìä –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', 'promote:my_tasks:1'),
        parse_mode: 'HTML'
      }
    );
    
    await ctx.answerCallbackQuery('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');

  } catch (error) {
    console.error('Task cancellation error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
});

// Utility functions
function getTaskStatusEmoji(status: string): string {
  const emojis = {
    active: 'üü¢',
    paused: 'üü°',
    completed: '‚úÖ',
    cancelled: '‚ùå',
    expired: '‚è∞'
  };
  return emojis[status as keyof typeof emojis] || '‚ùì';
}

function getTaskStatusText(status: string): string {
  const texts = {
    active: '–ê–∫—Ç–∏–≤–Ω–æ–µ',
    paused: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    cancelled: '–û—Ç–º–µ–Ω–µ–Ω–æ',
    expired: '–ò—Å—Ç–µ–∫–ª–æ'
  };
  return texts[status as keyof typeof texts] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getExecutionStatusEmoji(status: string): string {
  const emojis = {
    pending: 'üü°',
    approved: '‚úÖ',
    rejected: '‚ùå',
    expired: '‚è∞'
  };
  return emojis[status as keyof typeof emojis] || '‚ùì';
}

function getExecutionStatusText(status: string): string {
  const texts = {
    pending: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    approved: '–û–¥–æ–±—Ä–µ–Ω–æ',
    rejected: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
    expired: '–ò—Å—Ç–µ–∫–ª–æ'
  };
  return texts[status as keyof typeof texts] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getTaskTypeIcon(type: TaskType): string {
  const icons = {
    [TaskType.subscribe]: 'üì∫',
    [TaskType.join_group]: 'üë•',
    [TaskType.view_post]: 'üëÄ',
    [TaskType.react_post]: 'üëç',
    [TaskType.use_bot]: 'ü§ñ',
    [TaskType.premium_boost]: '‚≠ê'
  };
  return icons[type] || 'üìã';
}

function getTaskTypeName(type: TaskType): string {
  const names = {
    [TaskType.subscribe]: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª',
    [TaskType.join_group]: '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É',
    [TaskType.view_post]: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞',
    [TaskType.react_post]: '–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç',
    [TaskType.use_bot]: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞',
    [TaskType.premium_boost]: '–ü—Ä–µ–º–∏—É–º –±—É—Å—Ç'
  };
  return names[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getCommissionRate(userLevel: string): number {
  const rates = {
    bronze: 7,
    silver: 6,
    gold: 5,
    premium: 3
  };
  return rates[userLevel as keyof typeof rates] || 7;
}

function getLevelEmoji(level: string): string {
  const emojis = {
    bronze: 'ü•â',
    silver: 'ü•à',
    gold: 'ü•á',
    premium: 'üíé'
  };
  return emojis[level as keyof typeof emojis] || 'ü•â';
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}