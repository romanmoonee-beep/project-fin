import { Composer, InlineKeyboard } from 'grammy';
import { taskService } from '../services/taskService';
import { telegramService } from '../services/telegramService';
import { TaskType } from '@pr-gram/database';
import { applyMultiplier } from '@pr-gram/shared';
import type { BotContext } from '../types/context';

export const earnHandler = new Composer<BotContext>();

// Show earn menu
earnHandler.callbackQuery('menu:earn', async (ctx) => {
  const availableTasks = await taskService.getTaskCounts();
  const userLevel = ctx.user.level;
  const multiplier = getMultiplier(userLevel);
  
  const earnText = `
üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨</b>

üî• –î–æ—Å—Ç—É–ø–Ω–æ: <b>${availableTasks.total} –∑–∞–¥–∞–Ω–∏–π</b>
‚≠ê –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>${userLevel} (+${Math.round((multiplier - 1) * 100)}%)</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:
`;

  const keyboard = new InlineKeyboard()
    .text(`üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\nüî• ${availableTasks.subscribe} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 50-500 GRAM`, 'earn:subscribe').row()
    .text(`üë• –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã\nüî• ${availableTasks.join_group} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 75-750 GRAM`, 'earn:join_group').row()
    .text(`üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤\nüî• ${availableTasks.view_post} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 25-200 GRAM`, 'earn:view_post').row()
    .text(`ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–æ–≤\nüî• ${availableTasks.use_bot} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 100-1500 GRAM`, 'earn:use_bot').row()
    .text(`üëç –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\nüî• ${availableTasks.react_post} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 30-150 GRAM`, 'earn:react_post').row()
    .text(`‚≠ê –ü—Ä–µ–º–∏—É–º –±—É—Å—Ç\nüî• ${availableTasks.premium_boost} –∑–∞–¥–∞–Ω–∏–π\nüí∞ 500-2000 GRAM`, 'earn:premium_boost').row()
    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(earnText, { reply_markup: keyboard });
  await ctx.answerCallbackQuery();
});

// Show tasks by type
earnHandler.callbackQuery(/^earn:(.+)$/, async (ctx) => {
  const taskType = ctx.match[1] as TaskType;
  await showTasksByType(ctx, taskType, 1);
});

// Show task details
earnHandler.callbackQuery(/^task:view:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await showTaskDetails(ctx, taskId);
});

// Execute task
earnHandler.callbackQuery(/^task:execute:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await executeTask(ctx, taskId);
});

// Check task completion
earnHandler.callbackQuery(/^task:check:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await checkTaskCompletion(ctx, taskId);
});

// Upload proof (for manual verification tasks)
earnHandler.callbackQuery(/^task:upload:(.+)$/, async (ctx) => {
  const taskId = ctx.match[1];
  await ctx.conversation.enter('uploadTaskProof', { taskId });
});

// Pagination
earnHandler.callbackQuery(/^earn:(.+):page:(\d+)$/, async (ctx) => {
  const taskType = ctx.match[1] as TaskType;
  const page = parseInt(ctx.match[2]);
  await showTasksByType(ctx, taskType, page);
});

// Helper functions
async function showTasksByType(ctx: BotContext, taskType: TaskType, page: number) {
  try {
    const tasks = await taskService.getAvailableTasks(
      ctx.user.telegramId,
      ctx.user.level,
      taskType,
      page,
      10
    );

    if (tasks.tasks.length === 0) {
      await ctx.editMessageText(
        `üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "${getTaskTypeName(taskType)}"`,
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:earn') }
      );
      return;
    }

    const boostedTasks = tasks.tasks.filter(t => t.isBoosted);
    const regularTasks = tasks.tasks.filter(t => !t.isBoosted);

    let text = `${getTaskTypeIcon(taskType)} <b>${getTaskTypeName(taskType).toUpperCase()}</b>\n\n`;
    
    if (boostedTasks.length > 0) {
      text += `üöÄ <b>–ë–£–°–¢ –ó–ê–î–ê–ù–ò–Ø (—Ç–æ–ø):</b>\n\n`;
      boostedTasks.forEach(task => {
        text += formatBoostedTask(task, ctx.user.level);
      });
      text += '\n';
    }

    if (regularTasks.length > 0) {
      text += `–û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n`;
      regularTasks.forEach(task => {
        text += formatRegularTask(task, ctx.user.level);
      });
    }

    const keyboard = new InlineKeyboard();
    
    // Add task buttons
    tasks.tasks.forEach(task => {
      const prefix = task.isBoosted ? '‚≠ê üöÄ ' : '';
      keyboard.text(
        `${prefix}${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''}`,
        `task:view:${task.id}`
      ).row();
    });

    // Pagination
    if (tasks.totalPages > 1) {
      const paginationRow = [];
      if (tasks.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `earn:${taskType}:page:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${tasks.totalPages}`, callback_data: 'noop' });
      if (tasks.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `earn:${taskType}:page:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∑–∞—Ä–∞–±–æ—Ç–æ–∫', 'menu:earn');

    await ctx.editMessageText(text, { reply_markup: keyboard });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Show tasks by type error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
  }
}

async function showTaskDetails(ctx: BotContext, taskId: string) {
  try {
    const task = await taskService.getTaskDetails(taskId, ctx.user.telegramId);
    const userLevel = ctx.user.level;
    const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);

    const taskIcon = getTaskTypeIcon(task.type);
    const timeLeft = task.expiresAt ? formatTimeLeft(task.expiresAt) : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π';

    let text = `${taskIcon} <b>–ó–ê–î–ê–ù–ò–ï: ${task.title}</b>\n\n`;
    text += `üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${task.description}\n\n`;
    text += `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${finalReward} GRAM\n`;
    text += `‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${timeLeft}\n`;
    text += `üë• <b>–í—ã–ø–æ–ª–Ω–∏–ª–∏:</b> ${task.completedCount}/${task.targetCount}\n\n`;

    // Add instructions based on task type
    text += getTaskInstructions(task.type, task.targetUrl);

    const keyboard = new InlineKeyboard();

    // Check if user already executed this task
    if (task.executions && task.executions.length > 0) {
      const execution = task.executions[0];
      if (execution.status === 'pending') {
        text += `\n‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏`;
        keyboard.text('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `task:check:${taskId}`);
      } else if (execution.status === 'approved') {
        text += `\n‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –æ–¥–æ–±—Ä–µ–Ω–æ`;
      } else if (execution.status === 'rejected') {
        text += `\n‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n<i>–ü—Ä–∏—á–∏–Ω–∞: ${execution.adminComment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</i>`;
        if (canAppeal(execution)) {
          keyboard.text('üìù –ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é', `appeal:create:${execution.id}`);
        }
      }
    } else {
      // User can execute the task
      keyboard.text('üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', `task:execute:${taskId}`);
    }

    keyboard.row().text('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', `task:info:${taskId}`);
    keyboard.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', `earn:${task.type}`);

    await ctx.editMessageText(text, { reply_markup: keyboard });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Show task details error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
}

async function executeTask(ctx: BotContext, taskId: string) {
  try {
    const task = await taskService.getTaskDetails(taskId);
    
    // Show execution interface based on task type
    switch (task.type) {
      case TaskType.subscribe:
      case TaskType.join_group:
      case TaskType.view_post:
      case TaskType.react_post:
        await showAutoVerificationTask(ctx, task);
        break;
      case TaskType.use_bot:
      case TaskType.premium_boost:
        await showManualVerificationTask(ctx, task);
        break;
      default:
        await ctx.answerCallbackQuery('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è');
    }

  } catch (error) {
    console.error('Execute task error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
}

async function showAutoVerificationTask(ctx: BotContext, task: any) {
  const taskIcon = getTaskTypeIcon(task.type);
  const actionText = getActionText(task.type);
  const buttonText = getButtonText(task.type);

  let text = `${taskIcon} <b>–ó–ê–î–ê–ù–ò–ï: ${task.title}</b>\n\n`;
  text += `üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${task.description}\n\n`;
  text += `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} GRAM\n`;
  text += `‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${task.expiresAt ? formatTimeLeft(task.expiresAt) : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n\n`;
  
  text += `üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>\n`;
  text += `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "${buttonText}"\n`;
  text += `2. ${actionText}\n`;
  text += `3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"\n\n`;
  text += `‚ùó –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"`;

  const keyboard = new InlineKeyboard()
    .url(buttonText, task.targetUrl).row()
    .text('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', `task:check:${task.id}`)
    .text('‚ùå –û—Ç–º–µ–Ω–∞', `task:view:${task.id}`);

  await ctx.editMessageText(text, { reply_markup: keyboard });
  await ctx.answerCallbackQuery();
}

async function showManualVerificationTask(ctx: BotContext, task: any) {
  const taskIcon = getTaskTypeIcon(task.type);

  let text = `${taskIcon} <b>–ó–ê–î–ê–ù–ò–ï: ${task.title}</b>\n\n`;
  text += `üìã <b>–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n${task.description}\n\n`;
  text += `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${task.reward} GRAM\n`;
  text += `‚ö†Ô∏è <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–æ–≤ —Ä–∞–Ω—å—à–µ 7 –¥–Ω–µ–π –ó–ê–ü–†–ï–©–ï–ù–û!</b>\n\n`;

  if (task.targetUrl) {
    text += `üîó <b>–°—Å—ã–ª–∫–∞:</b> ${task.targetUrl}\n\n`;
  }

  text += `üì∑ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞`;

  const keyboard = new InlineKeyboard();
  
  if (task.targetUrl) {
    keyboard.url('üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é', task.targetUrl).row();
  }
  
  keyboard.text('üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', `task:upload:${task.id}`)
    .text('‚ùå –û—Ç–º–µ–Ω–∞', `task:view:${task.id}`);

  await ctx.editMessageText(text, { reply_markup: keyboard });
  await ctx.answerCallbackQuery();
}

async function checkTaskCompletion(ctx: BotContext, taskId: string) {
  try {
    await ctx.answerCallbackQuery('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');

    const execution = await taskService.executeTask(
      ctx.user.telegramId,
      taskId
    );

    if (execution.status === 'approved') {
      const finalReward = applyMultiplier(execution.rewardAmount.toNumber(), ctx.user.level);
      
      const successText = `
‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>

${getTaskTypeIcon(execution.task.type)} ${execution.task.title}
üí∞ +${finalReward} GRAM –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –ë–∞–ª–∞–Ω—Å: ${ctx.user.balance.toNumber() + finalReward} GRAM (+${finalReward})
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${ctx.user.tasksCompleted + 1} (+1)
‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${finalReward} GRAM

üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –ë–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π', 'menu:earn')
        .text('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.editMessageText(successText, { reply_markup: keyboard });

    } else if (execution.status === 'pending') {
      const pendingText = `
‚è≥ <b>–ó–ê–î–ê–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –ù–ê –ü–†–û–í–ï–†–ö–£</b>

‚úÖ –ó–∞–¥–∞–Ω–∏–µ #${execution.id.slice(-6)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

‚è∞ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${formatDateTime(execution.createdAt)}
‚îú –ê–≤—Ç–æ—Ä: @${execution.task.author?.username || '–∞–≤—Ç–æ—Ä'}
‚îî –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–µ–∑ ${execution.task.autoApproveHours} —á–∞—Å–æ–≤

üí° –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ ${execution.task.autoApproveHours} —á–∞—Å–æ–≤, –æ–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ.

üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.
`;

      const keyboard = new InlineKeyboard()
        .text('üí∞ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è', 'menu:earn')
        .text('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

      await ctx.editMessageText(pendingText, { reply_markup: keyboard });

    } else {
      await ctx.editMessageText(
        '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        { reply_markup: new InlineKeyboard().text('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', `task:view:${taskId}`) }
      );
    }

  } catch (error) {
    console.error('Check task completion error:', error);
    const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
    
    await ctx.editMessageText(
      `‚ùå ${errorMessage}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
      { reply_markup: new InlineKeyboard().text('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', `task:view:${taskId}`) }
    );
  }
}

// Utility functions
function getTaskTypeName(type: TaskType): string {
  const names = {
    [TaskType.subscribe]: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã',
    [TaskType.join_group]: '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã', 
    [TaskType.view_post]: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤',
    [TaskType.react_post]: '–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã',
    [TaskType.use_bot]: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤',
    [TaskType.premium_boost]: '–ü—Ä–µ–º–∏—É–º –±—É—Å—Ç'
  };
  return names[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function getTaskTypeIcon(type: TaskType): string {
  const icons = {
    [TaskType.subscribe]: 'üì∫',
    [TaskType.join_group]: 'üë•',
    [TaskType.view_post]: 'üëÄ', 
    [TaskType.react_post]: 'üëç',
    [TaskType.use_bot]: 'ü§ñ',
    [TaskType.premium_boost]: '‚≠ê'
  };
  return icons[type] || 'üìã';
}

function getActionText(type: TaskType): string {
  const actions = {
    [TaskType.subscribe]: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
    [TaskType.join_group]: '–í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É',
    [TaskType.view_post]: '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç',
    [TaskType.react_post]: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç',
    [TaskType.use_bot]: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º',
    [TaskType.premium_boost]: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞–Ω–∏–µ'
  };
  return actions[type] || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ';
}

function getButtonText(type: TaskType): string {
  const buttons = {
    [TaskType.subscribe]: 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
    [TaskType.join_group]: 'üîó –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É', 
    [TaskType.view_post]: 'üîó –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç',
    [TaskType.react_post]: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É',
    [TaskType.use_bot]: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É',
    [TaskType.premium_boost]: 'üîó –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ'
  };
  return buttons[type] || 'üîó –ü–µ—Ä–µ–π—Ç–∏';
}

function getTaskInstructions(type: TaskType, targetUrl?: string): string {
  const baseInstructions = {
    [TaskType.subscribe]: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.join_group]: '–í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.view_post]: '–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.react_post]: '–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.use_bot]: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç',
    [TaskType.premium_boost]: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ'
  };
  
  return baseInstructions[type] || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é';
}

function formatBoostedTask(task: any, userLevel: string): string {
  const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);
  return `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë ‚≠ê üöÄ ${task.title.substring(0, 20)}${task.title.length > 20 ? '...' : ''}\n‚ïë üí∞ ${finalReward} GRAM ‚Ä¢ üë• ${task.completedCount}/${task.targetCount}\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;
}

function formatRegularTask(task: any, userLevel: string): string {
  const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);
  return `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}\n‚îÇ üí∞ ${finalReward} GRAM\n‚îÇ üë• ${task.completedCount}/${task.targetCount}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n`;
}

function getMultiplier(level: string): number {
  const multipliers = { bronze: 1.0, silver: 1.2, gold: 1.35, premium: 1.5 };
  return multipliers[level as keyof typeof multipliers] || 1.0;
}

function formatTimeLeft(expiresAt: Date): string {
  const now = new Date();
  const diff = expiresAt.getTime() - now.getTime();
  
  if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (days > 0) return `${days} –¥–Ω. ${hours} —á.`;
  return `${hours} —á.`;
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function canAppeal(execution: any): boolean {
  // User can appeal within 24 hours of rejection
  if (!execution.verifiedAt) return false;
  const hoursSinceRejection = (Date.now() - execution.verifiedAt.getTime()) / (1000 * 60 * 60);
  return hoursSinceRejection < 24;
}