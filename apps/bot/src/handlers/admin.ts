import { Composer, InlineKeyboard } from 'grammy';
import { taskService } from '../services/taskService';
import { balanceService } from '../services/balanceService';
import { analyticsService } from '../services/analyticsService';
import { isAdmin, isSuperAdmin } from '../config';
import type { BotContext } from '../types/context';
import {
  searchUserConversation,
  changeUserBalanceConversation,
  banUserConversation,
  createBroadcastConversation,
  processWithdrawalConversation
} from '../conversations/admin';

import { generateAdminToken, logAdminSession } from '../utils/jwt';
export const adminHandler = new Composer<BotContext>();

adminHandler.use(searchUserConversation);
adminHandler.use(changeUserBalanceConversation);
adminHandler.use(banUserConversation);
adminHandler.use(createBroadcastConversation);
adminHandler.use(processWithdrawalConversation);


// Admin access middleware
adminHandler.use(async (ctx, next) => {
  if (!ctx.from || !isAdmin(ctx.from.id)) {
    await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }
  return next();
});


// Show admin menu
adminHandler.callbackQuery('menu:admin', async (ctx) => {
  //if (!isAdmin(ctx.from!.id)) {
    await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }


  const adminText = `
üõ°Ô∏è <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b>

üëë –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${isSuperAdmin(ctx.from!.id) ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
`;

  const keyboard = new InlineKeyboard()
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 'admin:stats').row()
    .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'admin:users').row()
    .text('üìã –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π', 'admin:moderation').row()
    .text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', 'admin:balances').row()
    .text('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin:broadcast').row()
    .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'admin:settings').row();

  if (isSuperAdmin(ctx.from!.id)) {
    keyboard.text('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', 'admin:technical').row();
  }

  keyboard.text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main');

  await ctx.editMessageText(adminText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
});

// System statistics
adminHandler.callbackQuery('admin:stats', async (ctx) => {
  await showSystemStatistics(ctx);
});

// Show system statistics
async function showSystemStatistics(ctx: BotContext) {
  try {
    const stats = await analyticsService.getSystemStatistics();
    
    let text = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n`;
    
    text += `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ: ${stats.users.totalUsers}\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.users.activeUsers}\n`;
    text += `‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.users.newUsersToday}\n`;
    text += `‚îú Premium: ${stats.users.premiumUsers}\n`;
    text += `‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${Math.round(stats.users.averageBalance)} GRAM\n\n`;
    
    text += `üìã <b>–ó–∞–¥–∞–Ω–∏—è:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ: ${stats.tasks.totalTasks}\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.tasks.activeTasks}\n`;
    text += `‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.tasks.completedTasks}\n`;
    text += `‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.tasks.totalExecutions}\n`;
    text += `‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${stats.tasks.successRate}%\n`;
    text += `‚îî –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${Math.round(stats.tasks.averageReward)} GRAM\n\n`;
    
    text += `üí≥ <b>–ß–µ–∫–∏:</b>\n`;
    text += `‚îú –í—Å–µ–≥–æ: ${stats.checks.totalChecks}\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.checks.activeChecks}\n`;
    text += `‚îú –ê–∫—Ç–∏–≤–∞—Ü–∏–π: ${stats.checks.totalActivations}\n`;
    text += `‚îú –û–±—â–∞—è —Å—É–º–º–∞: ${Math.round(stats.checks.totalAmount)} GRAM\n`;
    text += `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${stats.checks.successRate}%\n\n`;
    
    text += `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n`;
    text += `‚îú –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${Math.round(stats.revenue.totalRevenue)} GRAM\n`;
    text += `‚îú –ö–æ–º–∏—Å—Å–∏–∏: ${Math.round(stats.revenue.totalCommissions)} GRAM\n`;
    text += `‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${Math.round(stats.revenue.averageTransactionSize)} GRAM`;

    const keyboard = new InlineKeyboard()
      .text('üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'admin:analytics')
      .text('üë• –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin:user_levels').row()
      .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin:stats')
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('System statistics error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

// User management
adminHandler.callbackQuery('admin:users', async (ctx) => {
  await showUserManagement(ctx);
});

// Show user management
async function showUserManagement(ctx: BotContext) {
  const userManagementText = `
üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

  const keyboard = new InlineKeyboard()
    .text('üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin:find_user')
    .text('üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin:top_users').row()
    .text('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'admin:banned_users')
    .text('üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin:premium_users').row()
    .text('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–≤–Ω–µ–π', 'admin:user_levels')
    .text('üéØ –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', 'admin:mass_actions').row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

  await ctx.editMessageText(userManagementText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// Task moderation
adminHandler.callbackQuery('admin:moderation', async (ctx) => {
  await showModerationPanel(ctx);
});

// Show moderation panel
async function showModerationPanel(ctx: BotContext) {
  try {
    const pendingCount = await taskService.getPendingModerationCount();
    const appealsCount = await taskService.getPendingAppealsCount();
    
    let text = `üìã <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô</b>\n\n`;
    text += `‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: ${pendingCount} –∑–∞–¥–∞–Ω–∏–π\n`;
    text += `üìù –ê–ø–µ–ª–ª—è—Ü–∏–π: ${appealsCount}\n\n`;
    text += `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`;

    const keyboard = new InlineKeyboard()
      .text(`‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (${pendingCount})`, 'admin:pending_tasks')
      .text(`üìù –ê–ø–µ–ª–ª—è—Ü–∏–∏ (${appealsCount})`, 'admin:appeals').row()
      .text('üîç –ü–æ–∏—Å–∫ –ø–æ ID', 'admin:find_execution')
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'admin:moderation_stats').row()
      .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', 'admin:moderation_settings')
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Moderation panel error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
  }
}

// Balance management
adminHandler.callbackQuery('admin:balances', async (ctx) => {
  await showBalanceManagement(ctx);
});

// Show balance management
async function showBalanceManagement(ctx: BotContext) {
  if (!isSuperAdmin(ctx.from!.id)) {
    await ctx.answerCallbackQuery('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
    return;
  }

  const balanceText = `
üí∞ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê–ú–ò</b>

‚ö†Ô∏è <b>–û–°–¢–û–†–û–ñ–ù–û!</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

  const keyboard = new InlineKeyboard()
    .text('üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'admin:add_balance')
    .text('üí∏ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å', 'admin:subtract_balance').row()
    .text('‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'admin:freeze_balance')
    .text('üî• –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'admin:unfreeze_balance').row()
    .text('üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 'admin:transaction_history')
    .text('üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã', 'admin:financial_reports').row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

  await ctx.editMessageText(balanceText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// Broadcast
adminHandler.callbackQuery('admin:broadcast', async (ctx) => {
  await showBroadcastPanel(ctx);
});

// Show broadcast panel
async function showBroadcastPanel(ctx: BotContext) {
  const broadcastText = `
üì¢ <b>–°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–ö–ò</b>

–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –†–∞—Å—Å—ã–ª–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:
`;

  const keyboard = new InlineKeyboard()
    .text('üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'admin:broadcast_all')
    .text('üèÜ –ü–æ —É—Ä–æ–≤–Ω—è–º', 'admin:broadcast_levels').row()
    .text('üìä –ê–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'admin:broadcast_active')
    .text('üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'admin:broadcast_premium').row()
    .text('üéØ –ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º', 'admin:broadcast_criteria')
    .text('üìù –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'admin:broadcast_test').row()
    .text('üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫', 'admin:broadcast_history')
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

  await ctx.editMessageText(broadcastText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// System settings
adminHandler.callbackQuery('admin:settings', async (ctx) => {
  await showSystemSettings(ctx);
});

// Show system settings
async function showSystemSettings(ctx: BotContext) {
  if (!isSuperAdmin(ctx.from!.id)) {
    await ctx.answerCallbackQuery('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
    return;
  }

  const settingsText = `
‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±–æ—Ç–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
`;

  const keyboard = new InlineKeyboard()
    .text('üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin:settings_economy')
    .text('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω–∏–π', 'admin:settings_tasks').row()
    .text('üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin:settings_users')
    .text('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin:settings_technical').row()
    .text('üö´ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', 'admin:maintenance_mode')
    .text('üìä –õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', 'admin:limits').row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

  await ctx.editMessageText(settingsText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// Technical section (super admin only)
adminHandler.callbackQuery('admin:technical', async (ctx) => {
  if (!isSuperAdmin(ctx.from!.id)) {
    await ctx.answerCallbackQuery('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
    return;
  }

  await showTechnicalPanel(ctx);
});

// Show technical panel
async function showTechnicalPanel(ctx: BotContext) {
  const technicalText = `
üîß <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–ê–ù–ï–õ–¨</b>

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:
`;

  const keyboard = new InlineKeyboard()
    .text('üíæ –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'admin:db_status')
    .text('üîÑ –°—Ç–∞—Ç—É—Å Redis', 'admin:redis_status').row()
    .text('üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'admin:performance')
    .text('üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã', 'admin:logs').row()
    .text('üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞', 'admin:clear_cache')
    .text('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤', 'admin:restart_services').row()
    .text('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ', 'admin:system_info')
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:admin');

  await ctx.editMessageText(technicalText, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// Handle specific admin actions
adminHandler.callbackQuery(/^admin:(.+)$/, async (ctx) => {
  const action = ctx.match[1];
  
  switch (action) {
    case 'find_user':
      await ctx.conversation.enter('adminFindUser');
      break;
    case 'add_balance':
      await ctx.conversation.enter('adminAddBalance');
      break;
    case 'subtract_balance':
      await ctx.conversation.enter('adminSubtractBalance');
      break;
    case 'broadcast_all':
      await ctx.conversation.enter('adminBroadcast', { type: 'all' });
      break;
    case 'broadcast_test':
      await ctx.conversation.enter('adminBroadcast', { type: 'test' });
      break;
    case 'pending_tasks':
      await showPendingTasks(ctx);
      break;
    case 'appeals':
      await showPendingAppeals(ctx);
      break;
    case 'maintenance_mode':
      await toggleMaintenanceMode(ctx);
      break;
    case 'clear_cache':
      await clearSystemCache(ctx);
      break;
    case 'system_info':
      await showSystemInfo(ctx);
      break;
    default:
      await ctx.answerCallbackQuery('üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }
});

// Show pending tasks for moderation
async function showPendingTasks(ctx: BotContext, page = 1) {
  try {
    const pendingTasks = await taskService.getPendingExecutions(page, 5);

    if (pendingTasks.executions.length === 0) {
      await ctx.editMessageText(
        'üìã –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin:moderation') }
      );
      return;
    }

    let text = `üìã <b>–ó–ê–î–ê–ù–ò–Ø –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${pendingTasks.totalPages}\n\n`;

    pendingTasks.executions.forEach((execution, index) => {
      const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
      text += `üîç <b>${execution.task.title}</b>\n`;
      text += `‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo}\n`;
      text += `‚îú –¢–∏–ø: ${getTaskTypeIcon(execution.task.type)} ${getTaskTypeName(execution.task.type)}\n`;
      text += `‚îú –ù–∞–≥—Ä–∞–¥–∞: ${execution.rewardAmount} GRAM\n`;
      text += `‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${formatDateTime(execution.createdAt)}\n`;
      text += `‚îî ID: #${execution.id.slice(-6)}\n\n`;
    });

    const keyboard = new InlineKeyboard();
    
    // Add moderation buttons
    pendingTasks.executions.forEach(execution => {
      const userInfo = execution.user.username ? `@${execution.user.username}` : execution.user.firstName;
      keyboard.text(
        `üîç ${userInfo} - ${execution.task.title.substring(0, 20)}...`,
        `admin:moderate:${execution.id}`
      ).row();
    });

    // Pagination
    if (pendingTasks.totalPages > 1) {
      const paginationRow = [];
      if (pendingTasks.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `admin:pending_tasks:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${pendingTasks.totalPages}`, callback_data: 'noop' });
      if (pendingTasks.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `admin:pending_tasks:${page + 1}` });
      }
      keyboard.row(...paginationRow);
    }

    keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin:moderation');

    await ctx.editMessageText(text, { 
      reply_markup: keyboard,
      parse_mode: 'HTML' 
    });
    await ctx.answerCallbackQuery();

  } catch (error) {
    console.error('Pending tasks error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
  }
}

// Show pending appeals
async function showPendingAppeals(ctx: BotContext) {
  // Implementation would show appeals list
  await ctx.answerCallbackQuery('üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// Toggle maintenance mode
async function toggleMaintenanceMode(ctx: BotContext) {
  // Implementation would toggle maintenance mode
  await ctx.answerCallbackQuery('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// Clear system cache
async function clearSystemCache(ctx: BotContext) {
  try {
    // Implementation would clear Redis cache
    await ctx.answerCallbackQuery('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω');
  } catch (error) {
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
  }
}

// Show system info
async function showSystemInfo(ctx: BotContext) {
  const systemInfo = `
üìã <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï</b>

ü§ñ <b>–ë–æ—Ç:</b>
‚îú –í–µ—Ä—Å–∏—è: 1.0.0
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${getUptime()}
‚îú –ü–∞–º—è—Ç—å: ${getMemoryUsage()}
‚îî Node.js: ${process.version}

üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚îú –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
‚îú –ü–∏–Ω–≥: ~2ms
‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: 15

üîÑ <b>Redis:</b>
‚îú –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω
‚îú –ü–∏–Ω–≥: ~1ms
‚îî –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: 45MB

üìä <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚îú –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ~150
‚îú –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 85ms
‚îî –û—à–∏–±–æ–∫ –∑–∞ —á–∞—Å: 0
`;

  const keyboard = new InlineKeyboard()
    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin:system_info')
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin:technical');

  await ctx.editMessageText(systemInfo, { 
    reply_markup: keyboard,
    parse_mode: 'HTML' 
  });
  await ctx.answerCallbackQuery();
}

// Utility functions
function getTaskTypeIcon(type: string): string {
  const icons = {
    subscribe: 'üì∫',
    join_group: 'üë•',
    view_post: 'üëÄ',
    react_post: 'üëç',
    use_bot: 'ü§ñ',
    premium_boost: '‚≠ê'
  };
  return icons[type as keyof typeof icons] || 'üìã';
}

function getTaskTypeName(type: string): string {
  const names = {
    subscribe: '–ü–æ–¥–ø–∏—Å–∫–∞',
    join_group: '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ',
    view_post: '–ü—Ä–æ—Å–º–æ—Ç—Ä',
    react_post: '–†–µ–∞–∫—Ü–∏—è',
    use_bot: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞',
    premium_boost: '–ü—Ä–µ–º–∏—É–º –±—É—Å—Ç'
  };
  return names[type as keyof typeof names] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatDateTime(date: Date): string {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function getUptime(): string {
  const uptime = process.uptime();
  const hours = Math.floor(uptime / 3600);
  const minutes = Math.floor((uptime % 3600) / 60);
  return `${hours}—á ${minutes}–º`;
}

function getMemoryUsage(): string {
  const usage = process.memoryUsage();
  const mb = Math.round(usage.heapUsed / 1024 / 1024);
  return `${mb}MB`;
}


adminHandler.command('dashboard', async (ctx) => {
  if (!isAdmin(ctx.from!.id)) {
    await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    return;
  }

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    const token = generateAdminToken(ctx.user.telegramId, ctx.user.level);
    const dashboardUrl = `${config.WEB_ADMIN_URL}/admin-dashboard/${token}`;
    
    const dashboardText = `
üîó <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b>

**üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
${dashboardUrl}

**üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:**
${token.slice(-20)}

‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 15 –º–∏–Ω—É—Ç
üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

üí° <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø–∞–Ω–µ–ª–∏:</b>
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π  
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
`;

    await ctx.reply(dashboardText, { parse_mode: 'HTML' });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    await logAdminSession(ctx.user.telegramId, token);

  } catch (error) {
    console.error('Dashboard command error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏');
  }
});