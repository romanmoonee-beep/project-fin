import { NextFunction } from 'grammy';
import { InlineKeyboard } from 'grammy';
import { config } from '../config';
import { notificationService } from '../services/notificationService';
import { prisma } from '@pr-gram/database';
import type { BotContext } from '../types/context';

export const errorMiddleware = async (ctx: BotContext, next: NextFunction) => {
  try {
    await next();
  } catch (error) {
    console.error('Bot error:', error);

    // Log error to database if possible
    try {
      if (ctx.user) {
        await logError(ctx, error);
      }
    } catch (logError) {
      console.error('Failed to log error:', logError);
    }

    // Determine error type and response
    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    let shouldReply = true;

    if (error instanceof Error) {
      // Handle known error types
      if (error.message.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
        errorMessage = 'üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.';
      } else if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || error.message.includes('not found')) {
        errorMessage = 'üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      } else if (error.message.includes('–¥–æ—Å—Ç—É–ø') || error.message.includes('–ø—Ä–∞–≤–∞')) {
        errorMessage = 'üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.';
      } else if (error.message.includes('–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') || error.message.includes('rate limit')) {
        errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        shouldReply = false; // Don't spam user with rate limit messages
      } else if (error.message.includes('–∏—Å—Ç–µ–∫') || error.message.includes('expired')) {
        errorMessage = '‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.';
      } else if (error.message.includes('—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ') || error.message.includes('already')) {
        errorMessage = '‚úã –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ.';
      } else if (error.message.includes('validation') || error.message.includes('–≤–∞–ª–∏–¥–∞—Ü–∏—è')) {
        errorMessage = 'üìù –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.';
      } else if (error.message.includes('timeout')) {
        errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      } else if (error.message.includes('network') || error.message.includes('connection')) {
        errorMessage = 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else {
        // Generic error with hint
        errorMessage = `‚ùå ${error.message}`;
      }
    }

    // Reply to user if appropriate
    if (shouldReply) {
      try {
        const keyboard = new InlineKeyboard()
          .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main')
          .text('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support');

        if (ctx.callbackQuery) {
          await ctx.answerCallbackQuery(errorMessage);
          
          // Also edit message for serious errors
          if (!error?.message?.includes('–ª–∏–º–∏—Ç') && !error?.message?.includes('rate limit')) {
            await ctx.editMessageText(
              `${errorMessage}\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
              { reply_markup: keyboard }
            );
          }
        } else {
          await ctx.reply(
            `${errorMessage}\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
            { reply_markup: keyboard }
          );
        }
      } catch (replyError) {
        console.error('Failed to send error message:', replyError);
        
        // Try to answer callback query at least
        if (ctx.callbackQuery) {
          try {
            await ctx.answerCallbackQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
          } catch (callbackError) {
            console.error('Failed to answer callback query:', callbackError);
          }
        }
      }
    }

    // Notify admins for critical errors
    if (shouldNotifyAdmins(error)) {
      try {
        await notifyAdmins(ctx, error);
      } catch (notifyError) {
        console.error('Failed to notify admins:', notifyError);
      }
    }
  }
};

// Log error to database
async function logError(ctx: BotContext, error: unknown) {
  try {
    const errorData = {
      userId: ctx.user.telegramId,
      type: 'bot_error',
      description: `–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: ${error instanceof Error ? error.message : 'Unknown error'}`,
      metadata: {
        error: {
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
          name: error instanceof Error ? error.name : 'UnknownError'
        },
        context: {
          chatId: ctx.chat?.id,
          chatType: ctx.chat?.type,
          messageText: ctx.message?.text,
          callbackData: ctx.callbackQuery?.data,
          command: ctx.message?.text?.split(' ')[0],
          userId: ctx.user.telegramId,
          username: ctx.user.username
        },
        timestamp: new Date().toISOString(),
        userAgent: 'TelegramBot',
        botVersion: '1.0.0'
      }
    };

    await prisma.userActivity.create({
      data: errorData
    });
  } catch (logError) {
    console.error('Error logging failed:', logError);
  }
}

// Check if admins should be notified
function shouldNotifyAdmins(error: unknown): boolean {
  if (!error || !(error instanceof Error)) {
    return false;
  }

  const message = error.message.toLowerCase();
  
  // Don't notify for common user errors
  const commonErrors = [
    '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
    '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    '—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
    '–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç',
    'rate limit',
    '–∏—Å—Ç–µ–∫',
    'expired',
    'validation',
    '–≤–∞–ª–∏–¥–∞—Ü–∏—è',
    '–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥'
  ];

  for (const commonError of commonErrors) {
    if (message.includes(commonError)) {
      return false;
    }
  }

  // Notify for database, network, and system errors
  const criticalErrors = [
    'database',
    'connection',
    'timeout',
    'internal',
    'system',
    'prisma',
    'redis',
    'crash',
    'fatal'
  ];

  for (const criticalError of criticalErrors) {
    if (message.includes(criticalError)) {
      return true;
    }
  }

  return false;
}

// Notify admins about critical errors
async function notifyAdmins(ctx: BotContext, error: unknown) {
  const adminIds = config.BOT_ADMIN_IDS;
  
  if (adminIds.length === 0) {
    return;
  }

  const errorMessage = error instanceof Error ? error.message : 'Unknown error';
  const errorStack = error instanceof Error ? error.stack : undefined;
  
  const adminNotification = `
üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${ctx.user?.username || ctx.user?.firstName || 'Unknown'} (${ctx.user?.telegramId})
üí¨ <b>–ß–∞—Ç:</b> ${ctx.chat?.id} (${ctx.chat?.type})
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${ctx.message?.text || ctx.callbackQuery?.data || 'N/A'}

‚ùå <b>–û—à–∏–±–∫–∞:</b> ${errorMessage}

üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
`;

  try {
    await notificationService.sendBulkNotifications(
      adminIds,
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞',
      adminNotification,
      'system_message',
      {
        error: errorMessage,
        stack: errorStack,
        userId: ctx.user?.telegramId,
        chatId: ctx.chat?.id,
        timestamp: new Date().toISOString()
      }
    );
  } catch (notifyError) {
    console.error('Failed to notify admins:', notifyError);
  }
}