import { Menu } from '@grammyjs/menu';
import { prisma, TaskStatus } from '@pr-gram/database';
import { taskService } from '../services/taskService';
import { TaskType } from '@pr-gram/database';
import { TASK_TYPE_CONFIG, getCommissionRate } from '@pr-gram/shared';
import type { BotContext } from '../types/context';

// –ú–µ–Ω—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
export const promoteMenu = new Menu<BotContext>('promote')
  .text('üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\nüí∞ 50-500 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.subscribe });
  }).row()
  
  .text('üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\nüí∞ 75-750 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.join_group });
  }).row()
  
  .text('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞\nüí∞ 25-200 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.view_post });
  }).row()
  
  .text('ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞\nüí∞ 100-1500 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.use_bot });
  }).row()
  
  .text('üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç\nüí∞ 30-150 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.react_post });
  }).row()
  
  .text('‚≠ê –ü—Ä–µ–º–∏—É–º –±—É—Å—Ç\nüí∞ 500-2000 GRAM –∑–∞ –∑–∞–¥–∞–Ω–∏–µ', async (ctx) => {
    await ctx.conversation.enter('createTask', { taskType: TaskType.premium_boost });
  }).row()
  
  .text('üéØ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', async (ctx) => {
    try {
      const userTasks = await taskService.getUserTasks(ctx.user.telegramId, undefined, 1, 10);
      
      if (userTasks.tasks.length === 0) {
        await ctx.editMessageText(
          'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è!',
          {
            reply_markup: { 
              inline_keyboard: [
                [{ text: 'üì¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'menu:promote' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]
              ]
            }
          }
        );
        return;
      }

      let tasksText = `üéØ <b>–ú–û–ò –ó–ê–î–ê–ù–ò–Ø</b>\n\nüìä –í—Å–µ–≥–æ: ${userTasks.total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${userTasks.page}/${userTasks.totalPages}\n\n`;
      
      userTasks.tasks.forEach((task, index) => {
        const icon = getTaskTypeIcon(task.type);
        const statusEmoji = getStatusEmoji(task.status);
        const progress = `${task.completedCount}/${task.targetCount}`;
        
        tasksText += `${statusEmoji} ${icon} <b>${task.title}</b>\n`;
        tasksText += `   üí∞ ${task.reward} GRAM ‚Ä¢ üë• ${progress}\n`;
        tasksText += `   üìÖ ${formatDate(task.createdAt)}\n\n`;
      });

      const keyboard = [];
      
      // Task action buttons
      userTasks.tasks.forEach((task, index) => {
        keyboard.push([
          { text: `üìä ${task.title.substring(0, 25)}...`, callback_data: `task_stats:${task.id}` }
        ]);
      });

      // Pagination
      if (userTasks.totalPages > 1) {
        const paginationRow = [];
        if (userTasks.hasPrev) {
          paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `my_tasks:page:${userTasks.page - 1}` });
        }
        paginationRow.push({ text: `${userTasks.page}/${userTasks.totalPages}`, callback_data: 'noop' });
        if (userTasks.hasNext) {
          paginationRow.push({ text: '‚û°Ô∏è', callback_data: `my_tasks:page:${userTasks.page + 1}` });
        }
        keyboard.push(paginationRow);
      }

      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é', callback_data: 'menu:promote' }]);

      await ctx.editMessageText(tasksText, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show my tasks error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu:promote' }]] } }
      );
    }
  }).row()
  
  .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    try {
      const stats = await getUserTaskStats(ctx.user.telegramId);
      
      const statsText = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø</b>

üìà <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.today.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.today.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.today.executions}</b>

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.week.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.week.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.week.executions}</b>

üìà <b>–ó–∞ –º–µ—Å—è—Ü:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.month.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.month.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.month.executions}</b>

üèÜ <b>–õ—É—á—à–∏–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:</b>
${stats.bestType.name} - <b>${stats.bestType.count}</b> –∑–∞–¥–∞–Ω–∏–π

üí≥ <b>–ö–æ–º–∏—Å—Å–∏—è —É—Ä–æ–≤–Ω—è:</b> ${getCommissionRate(ctx.user.level)}%
üí∞ <b>–û–±—â–∏–π –±—é–¥–∂–µ—Ç:</b> ${stats.totalBudget} GRAM
`;

      await ctx.editMessageText(statsText, {
        reply_markup: { 
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'promote:stats' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é', callback_data: 'menu:promote' }]
          ]
        },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show promotion stats error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu:promote' }]] } }
      );
    }
  }).row()
  
  .back('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    const mainText = `
ü§ñ <b>PR GRAM - –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –í TELEGRAM</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>${ctx.user.balance} GRAM</b>
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${getLevelEmoji(ctx.user.level)} ${ctx.user.level.toUpperCase()}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(mainText, {
      reply_markup: ctx.menu,
      parse_mode: 'HTML'
    });
  });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
promoteMenu.register(async (ctx) => {
  if (ctx.callbackQuery?.data === 'promote:stats') {
    try {
      const stats = await getUserTaskStats(ctx.user.telegramId);
      
      const statsText = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø</b>

üìà <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.today.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.today.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.today.executions}</b>

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.week.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.week.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.week.executions}</b>

üìà <b>–ó–∞ –º–µ—Å—è—Ü:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: <b>${stats.month.created}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>${stats.month.spent}</b> GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: <b>${stats.month.executions}</b>

üèÜ <b>–õ—É—á—à–∏–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:</b>
${stats.bestType.name} - <b>${stats.bestType.count}</b> –∑–∞–¥–∞–Ω–∏–π

üí≥ <b>–ö–æ–º–∏—Å—Å–∏—è —É—Ä–æ–≤–Ω—è:</b> ${getCommissionRate(ctx.user.level)}%
üí∞ <b>–û–±—â–∏–π –±—é–¥–∂–µ—Ç:</b> ${stats.totalBudget} GRAM
`;

      await ctx.editMessageText(statsText, {
        reply_markup: { 
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'promote:stats' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é', callback_data: 'menu:promote' }]
          ]
        },
        parse_mode: 'HTML'
      });
      
      await ctx.answerCallbackQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('Update promotion stats error:', error);
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
  const userLevel = ctx.user.level;
  const commission = getCommissionRate(userLevel);
  const balance = ctx.user.balance;
  
  const promoteText = `
üì¢ <b>–°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï</b>

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${balance} GRAM</b>
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${userLevel.toUpperCase()}</b> (–∫–æ–º–∏—Å—Å–∏—è ${commission}%)

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:
`;

  if (ctx.callbackQuery) {
    await ctx.editMessageText(promoteText, {
      reply_markup: promoteMenu,
      parse_mode: 'HTML'
    });
    await ctx.answerCallbackQuery();
  }
});

// Helper —Ñ—É–Ω–∫—Ü–∏–∏
const getTaskTypeIcon = (type: TaskType): string => {
  return TASK_TYPE_CONFIG[type]?.icon || 'üìã';
};

const getStatusEmoji = (status: string): string => {
  const emojis = {
    active: 'üü¢',
    completed: '‚úÖ',
    paused: '‚è∏Ô∏è',
    cancelled: '‚ùå',
    expired: '‚è∞',
    draft: 'üìù'
  };
  return emojis[status as keyof typeof emojis] || 'üîò';
};

const getLevelEmoji = (level: string): string => {
  const emojis = { bronze: 'ü•â', silver: 'ü•à', gold: 'ü•á', premium: 'üíé' };
  return emojis[level as keyof typeof emojis] || 'ü•â';
};

const formatDate = (date: Date): string => {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// –†–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ë–î
const getUserTaskStats = async (userId: number) => {
  try {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [allTasks, todayTasks, weekTasks, monthTasks] = await Promise.all([
      prisma.task.findMany({
        where: { authorId: userId },
        include: { executions: true }
      }),
      prisma.task.findMany({
        where: { 
          authorId: userId,
          createdAt: { gte: today }
        },
        include: { executions: true }
      }),
      prisma.task.findMany({
        where: { 
          authorId: userId,
          createdAt: { gte: weekAgo }
        },
        include: { executions: true }
      }),
      prisma.task.findMany({
        where: { 
          authorId: userId,
          createdAt: { gte: monthAgo }
        },
        include: { executions: true }
      })
    ]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    const calculateSpent = (tasksList: any[]) => {
      return tasksList.reduce((sum, task) => {
        return sum + (task.reward.toNumber() * task.targetCount);
      }, 0);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    const calculateExecutions = (tasksList: any[]) => {
      return tasksList.reduce((sum, task) => sum + task.completedCount, 0);
    };

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π
    const typeStats = allTasks.reduce((acc: any, task) => {
      acc[task.type] = (acc[task.type] || 0) + 1;
      return acc;
    }, {});

    const bestType = Object.entries(typeStats).reduce((best: any, [type, count]) => {
      if (count > best.count) {
        return { 
          type, 
          count, 
          name: TASK_TYPE_CONFIG[type as TaskType]?.name || type 
        };
      }
      return best;
    }, { type: '', count: 0, name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' });

    return {
      today: {
        created: todayTasks.length,
        spent: calculateSpent(todayTasks),
        executions: calculateExecutions(todayTasks)
      },
      week: {
        created: weekTasks.length,
        spent: calculateSpent(weekTasks),
        executions: calculateExecutions(weekTasks)
      },
      month: {
        created: monthTasks.length,
        spent: calculateSpent(monthTasks),
        executions: calculateExecutions(monthTasks)
      },
      bestType,
      totalBudget: calculateSpent(allTasks)
    };
  } catch (error) {
    console.error('Get user task stats error:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      today: { created: 0, spent: 0, executions: 0 },
      week: { created: 0, spent: 0, executions: 0 },
      month: { created: 0, spent: 0, executions: 0 },
      bestType: { type: '', count: 0, name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' },
      totalBudget: 0
    };
  }
};