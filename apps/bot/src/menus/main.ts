import { Menu } from '@grammyjs/menu';
import { prisma } from '@pr-gram/database';
import { TaskStatus } from '@pr-gram/database';
import { getUserLevelConfig, calculateLevelProgress } from '@pr-gram/shared';
import type { BotContext } from '../types/context';

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
export const mainMenu = new Menu<BotContext>('main')
  .text('üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', async (ctx) => {
    const availableTasks = await getAvailableTasksCount();
    const userLevel = ctx.user.level;
    const multiplier = getMultiplier(userLevel);
    
    const earnText = `
üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

üî• –î–æ—Å—Ç—É–ø–Ω–æ: <b>${availableTasks.total} –∑–∞–¥–∞–Ω–∏–π</b>
‚≠ê –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>${userLevel.toUpperCase()} (+${Math.round((multiplier - 1) * 100)}%)</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
`;

    await ctx.editMessageText(earnText, {
      reply_markup: earnMenu,
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('üì¢ –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å', async (ctx) => {
    const userTasks = await getUserTasksCount(ctx.user.telegramId);
    const userLevel = ctx.user.level;
    const commission = getCommissionRate(userLevel);
    
    const promoteText = `
üì¢ <b>–°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï</b>

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${ctx.user.balance} GRAM</b>
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${userLevel.toUpperCase()}</b> (–∫–æ–º–∏—Å—Å–∏—è ${commission}%)

üìä –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è: <b>${userTasks.active}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: <b>${userTasks.spentToday}</b> GRAM

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:
`;

    await ctx.editMessageText(promoteText, {
      reply_markup: promoteMenu,
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', async (ctx) => {
    const subscriptionText = `
‚úÖ <b>–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò</b>

ü§ñ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
üîí –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ <code>/setup @channel</code> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
‚Ä¢ <code>/status</code> - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ <code>/unsetup</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É

üí° –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–º–æ—â—å"
`;

    await ctx.editMessageText(subscriptionText, {
      reply_markup: subscriptionMenu,
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('üë§ –ü—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
    const referralStats = await getReferralStats(ctx.user.telegramId);
    const levelConfig = getUserLevelConfig(ctx.user.level);
    const levelProgress = calculateLevelProgress(ctx.user.balance.toNumber(), ctx.user.level);
    
    const profileText = `
üë§ <b>–í–ê–® –ü–†–û–§–ò–õ–¨</b>

üÜî ID: <code>${ctx.user.telegramId}</code>
üë§ –ò–º—è: ${ctx.user.firstName || ctx.user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${getLevelEmoji(ctx.user.level)} ${ctx.user.level.toUpperCase()}</b>

üí∞ <b>–ë–ê–õ–ê–ù–°:</b>
‚îú –î–æ—Å—Ç—É–ø–Ω–æ: <b>${ctx.user.balance} GRAM</b>
‚îî –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: <b>${ctx.user.frozenBalance} GRAM</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>${ctx.user.tasksCompleted}</b>
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>${ctx.user.tasksCreated}</b>
‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${referralStats.total}</b>
‚îî –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${ctx.user.totalEarned} GRAM</b>

üéØ <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê:</b>
‚îú –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>https://t.me/prgram_bot?start=${ctx.user.telegramId}</code>
‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>${referralStats.total}</b>
‚îú Premium —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${referralStats.premium}</b>
‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${referralStats.earned} GRAM</b>

üìà <b>–ü–†–û–ì–†–ï–°–° –£–†–û–í–ù–Ø:</b>
${generateProgressBar(levelProgress.progressPercentage)} ${levelProgress.progressPercentage}%
`;

    await ctx.editMessageText(profileText, {
      reply_markup: profileMenu,
      parse_mode: 'HTML'
    });
  })
  .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
    await ctx.conversation.enter('settings');
  }).row()
  
  .text('üÜò –ü–æ–º–æ—â—å', async (ctx) => {
    const helpText = `
üÜò <b>–ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£</b>

<b>üí∞ –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
2. –ü–æ–¥–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
4. –ü–æ–ª—É—á–∏—Ç–µ GRAM –Ω–∞ –±–∞–ª–∞–Ω—Å

<b>üì¢ –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ "üì¢ –ü—Ä–æ–¥–≤–∏–≥–∞—Ç—å"  
2. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
3. –û–ø–ª–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

<b>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setup @channel
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É

<b>üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã —Å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å

<b>üíé –£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
ü•â Bronze - –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
ü•à Silver - +20% –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É, -1% –∫–æ–º–∏—Å—Å–∏—è
ü•á Gold - +35% –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É, -2% –∫–æ–º–∏—Å—Å–∏—è  
üíé Premium - +50% –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É, -4% –∫–æ–º–∏—Å—Å–∏—è

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @prgram_help
<b>üì¢ –ù–æ–≤–æ—Å—Ç–∏:</b> @prgram_news
`;

    await ctx.editMessageText(helpText, {
      reply_markup: { inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]] },
      parse_mode: 'HTML'
    });
  }).row();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
mainMenu.register(async (ctx) => {
  const welcomeText = `
ü§ñ <b>PR GRAM - –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –í TELEGRAM</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>${ctx.user.balance} GRAM</b>
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${getLevelEmoji(ctx.user.level)} ${ctx.user.level.toUpperCase()}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

  if (ctx.callbackQuery) {
    await ctx.editMessageText(welcomeText, {
      reply_markup: mainMenu,
      parse_mode: 'HTML'
    });
    await ctx.answerCallbackQuery();
  } else {
    await ctx.reply(welcomeText, {
      reply_markup: mainMenu,
      parse_mode: 'HTML'
    });
  }
});

// –ò–º–ø–æ—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –º–µ–Ω—é
import { earnMenu } from './earn';
import { promoteMenu } from './promote';
import { subscriptionMenu } from './subscription';
import { profileMenu } from './profile';

// Helper —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ë–î
const getMultiplier = (level: string): number => {
  const multipliers = { bronze: 1.0, silver: 1.2, gold: 1.35, premium: 1.5 };
  return multipliers[level as keyof typeof multipliers] || 1.0;
};

const getCommissionRate = (level: string): number => {
  const rates = { bronze: 7, silver: 6, gold: 5, premium: 3 };
  return rates[level as keyof typeof rates] || 7;
};

const getLevelEmoji = (level: string): string => {
  const emojis = { bronze: 'ü•â', silver: 'ü•à', gold: 'ü•á', premium: 'üíé' };
  return emojis[level as keyof typeof emojis] || 'ü•â';
};

// –†–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
const getAvailableTasksCount = async (): Promise<{total: number}> => {
  try {
    const total = await prisma.task.count({
      where: {
        status: TaskStatus.active,
        expiresAt: {
          OR: [
            { equals: null },
            { gt: new Date() }
          ]
        }
      }
    });
    
    return { total };
  } catch (error) {
    console.error('Get available tasks count error:', error);
    return { total: 0 };
  }
};

const getUserTasksCount = async (userId: number) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const [active, spentToday] = await Promise.all([
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      prisma.task.count({
        where: {
          authorId: userId,
          status: TaskStatus.active
        }
      }),
      
      // –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
      prisma.task.aggregate({
        where: {
          authorId: userId,
          createdAt: {
            gte: today
          }
        },
        _sum: {
          reward: true
        }
      })
    ]);

    return {
      active,
      spentToday: spentToday._sum.reward?.toNumber() || 0
    };
  } catch (error) {
    console.error('Get user tasks count error:', error);
    return {
      active: 0,
      spentToday: 0
    };
  }
};

const getReferralStats = async (userId: number) => {
  try {
    const [totalReferrals, premiumReferrals, earnedFromReferrals] = await Promise.all([
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      prisma.user.count({
        where: {
          referrerId: userId
        }
      }),
      
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      prisma.user.count({
        where: {
          referrerId: userId,
          isPremium: true
        }
      }),
      
      // –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      prisma.transaction.aggregate({
        where: {
          userId: userId,
          type: 'referral'
        },
        _sum: {
          amount: true
        }
      })
    ]);

    return {
      total: totalReferrals,
      premium: premiumReferrals,
      earned: earnedFromReferrals._sum.amount?.toNumber() || 0
    };
  } catch (error) {
    console.error('Get referral stats error:', error);
    return {
      total: 0,
      premium: 0,
      earned: 0
    };
  }
};

const generateProgressBar = (percentage: number): string => {
  const barLength = 10;
  const filledLength = Math.round((percentage / 100) * barLength);
  const emptyLength = barLength - filledLength;
  
  return '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(emptyLength);
};