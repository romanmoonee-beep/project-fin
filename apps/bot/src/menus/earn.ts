import { Menu } from '@grammyjs/menu';
import { prisma, TaskStatus, TaskType, ExecutionStatus } from '@pr-gram/database';
import { taskService } from '../services/taskService';
import { TASK_TYPE_CONFIG, applyMultiplier } from '@pr-gram/shared';
import type { BotContext } from '../types/context';

// –ú–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞
export const earnMenu = new Menu<BotContext>('earn')
  .text('üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 50-500 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.subscribe, 1);
  }).row()
  
  .text('üë• –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 75-750 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.join_group, 1);
  }).row()
  
  .text('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 25-200 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.view_post, 1);
  }).row()
  
  .text('ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–æ–≤\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 100-1500 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.use_bot, 1);
  }).row()
  
  .text('üëç –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 30-150 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.react_post, 1);
  }).row()
  
  .text('‚≠ê –ü—Ä–µ–º–∏—É–º –±—É—Å—Ç\nüî• –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–π\nüí∞ 500-2000 GRAM', async (ctx) => {
    await showTasksByType(ctx, TaskType.premium_boost, 1);
  }).row()
  
  .text('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    try {
      const stats = await getUserEarningStats(ctx.user.telegramId);
      
      const statsText = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–†–ê–ë–û–¢–ö–ê</b>

üìà <b>–°–µ–≥–æ–¥–Ω—è:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>${stats.today.completed}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.today.earned}</b> GRAM
‚îî –í –ø—Ä–æ—Ü–µ—Å—Å–µ: <b>${stats.today.pending}</b> –∑–∞–¥–∞–Ω–∏–π

üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>${stats.week.completed}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.week.earned}</b> GRAM
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: <b>${Math.round(stats.week.earned / 7)}</b> GRAM/–¥–µ–Ω—å

üìà <b>–ó–∞ –º–µ—Å—è—Ü:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>${stats.month.completed}</b> –∑–∞–¥–∞–Ω–∏–π
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.month.earned}</b> GRAM
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥: <b>${Math.round(stats.month.earned / 30)}</b> GRAM/–¥–µ–Ω—å

üèÜ <b>–õ—É—á—à–∏–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:</b>
${stats.bestType.name} - <b>${stats.bestType.count}</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

‚≠ê <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è:</b> x${getMultiplier(ctx.user.level)}
üíé <b>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å:</b> ${getNextLevel(ctx.user.level)}

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${stats.approvalRate}%
‚îú –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: ${stats.averageReward} GRAM
‚îú –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.averageTime} –º–∏–Ω
‚îî –†–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: ${stats.rating}/5 ‚≠ê
`;

      await ctx.editMessageText(statsText, {
        reply_markup: { 
          inline_keyboard: [
            [{ text: 'üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ä–∞–±–æ—Ç–∫–∞', callback_data: 'earn:chart' }],
            [{ text: 'üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º', callback_data: 'earn:analysis' }],
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'earn:stats' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É', callback_data: 'menu:earn' }]
          ]
        },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show earning stats error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu:earn' }]] } }
      );
    }
  }).row()
  
  .text('üéØ –ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', async (ctx) => {
    try {
      const executions = await getUserExecutions(ctx.user.telegramId, 1, 10);
      
      if (executions.executions.length === 0) {
        await ctx.editMessageText(
          'üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!',
          {
            reply_markup: { 
              inline_keyboard: [
                [{ text: 'üí∞ –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'menu:earn' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]
              ]
            }
          }
        );
        return;
      }

      let executionsText = `üéØ <b>–ú–û–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>\n\nüìä –í—Å–µ–≥–æ: ${executions.total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${executions.page}/${executions.totalPages}\n\n`;
      
      executions.executions.forEach((execution, index) => {
        const task = execution.task;
        const icon = getTaskTypeIcon(task.type);
        const statusEmoji = getExecutionStatusEmoji(execution.status);
        
        executionsText += `${statusEmoji} ${icon} <b>${task.title}</b>\n`;
        executionsText += `   üí∞ ${execution.rewardAmount} GRAM\n`;
        executionsText += `   üìÖ ${formatDate(execution.createdAt)}\n`;
        
        if (execution.status === ExecutionStatus.pending) {
          executionsText += `   ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
        } else if (execution.status === ExecutionStatus.rejected && execution.adminComment) {
          executionsText += `   üí¨ ${execution.adminComment}\n`;
        }
        executionsText += '\n';
      });

      const keyboard = [];
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (executions.totalPages > 1) {
        const paginationRow = [];
        if (executions.hasPrev) {
          paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `executions:page:${executions.page - 1}` });
        }
        paginationRow.push({ text: `${executions.page}/${executions.totalPages}`, callback_data: 'noop' });
        if (executions.hasNext) {
          paginationRow.push({ text: '‚û°Ô∏è', callback_data: `executions:page:${executions.page + 1}` });
        }
        keyboard.push(paginationRow);
      }

      keyboard.push([
        { text: 'üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É', callback_data: 'executions:filter' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'earn:stats' }
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É', callback_data: 'menu:earn' }]);

      await ctx.editMessageText(executionsText, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show user executions error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu:earn' }]] } }
      );
    }
  }).row()
  
  .back('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    const mainText = `
ü§ñ <b>PR GRAM - –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –í TELEGRAM</b>

üí∞ –ë–∞–ª–∞–Ω—Å: <b>${ctx.user.balance} GRAM</b>
‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>${getLevelEmoji(ctx.user.level)} ${ctx.user.level.toUpperCase()}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(mainText, {
      reply_markup: ctx.menu,
      parse_mode: 'HTML'
    });
  });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
earnMenu.register(async (ctx) => {
  const data = ctx.callbackQuery?.data;
  
  if (data === 'earn:stats') {
    try {
      const stats = await getUserEarningStats(ctx.user.telegramId);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –≤—ã—à–µ)
      await ctx.answerCallbackQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
    return;
  }

  if (data?.startsWith('task_type:')) {
    const taskType = data.replace('task_type:', '') as TaskType;
    await showTasksByType(ctx, taskType, 1);
    return;
  }

  if (data?.startsWith('task_page:')) {
    const [type, page] = data.replace('task_page:', '').split(':');
    await showTasksByType(ctx, type as TaskType, parseInt(page));
    return;
  }

  if (data?.startsWith('task_view:')) {
    const taskId = data.replace('task_view:', '');
    await showTaskDetails(ctx, taskId);
    return;
  }

  if (data?.startsWith('executions:')) {
    await handleExecutionsCallback(ctx, data);
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞
  const availableTasks = await getTaskCounts();
  const userLevel = ctx.user.level;
  const multiplier = getMultiplier(userLevel);
  
  const earnText = `
üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

üî• –î–æ—Å—Ç—É–ø–Ω–æ: <b>${availableTasks.total} –∑–∞–¥–∞–Ω–∏–π</b>
‚≠ê –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>${userLevel.toUpperCase()} (+${Math.round((multiplier - 1) * 100)}%)</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:
`;

  if (ctx.callbackQuery) {
    await ctx.editMessageText(earnText, {
      reply_markup: earnMenu,
      parse_mode: 'HTML'
    });
    await ctx.answerCallbackQuery();
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–∏–ø—É
const showTasksByType = async (ctx: BotContext, taskType: TaskType, page: number) => {
  try {
    const tasks = await taskService.getAvailableTasks(
      ctx.user.telegramId,
      ctx.user.level,
      taskType,
      page,
      10
    );

    if (tasks.tasks.length === 0) {
      await ctx.editMessageText(
        `üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "${getTaskTypeName(taskType)}".\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`,
        { 
          reply_markup: { 
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É', callback_data: 'menu:earn' }]
            ]
          }
        }
      );
      return;
    }

    const boostedTasks = tasks.tasks.filter(t => t.isBoosted);
    const regularTasks = tasks.tasks.filter(t => !t.isBoosted);

    let text = `${getTaskTypeIcon(taskType)} <b>${getTaskTypeName(taskType).toUpperCase()}</b>\n\n`;
    text += `üìä –ù–∞–π–¥–µ–Ω–æ: ${tasks.total} –∑–∞–¥–∞–Ω–∏–π | –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page}/${tasks.totalPages}\n\n`;
    
    if (boostedTasks.length > 0) {
      text += `üöÄ <b>–ë–£–°–¢ –ó–ê–î–ê–ù–ò–Ø (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):</b>\n\n`;
      boostedTasks.forEach(task => {
        text += formatBoostedTask(task, ctx.user.level);
      });
      text += '\n';
    }

    if (regularTasks.length > 0) {
      text += `üìã <b>–û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n`;
      regularTasks.forEach(task => {
        text += formatRegularTask(task, ctx.user.level);
      });
    }

    const keyboard = [];
    
    // –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    tasks.tasks.forEach(task => {
      const prefix = task.isBoosted ? '‚≠ê üöÄ ' : '';
      const title = task.title.length > 25 ? task.title.substring(0, 25) + '...' : task.title;
      keyboard.push([{
        text: `${prefix}${title}`,
        callback_data: `task_view:${task.id}`
      }]);
    });

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (tasks.totalPages > 1) {
      const paginationRow = [];
      if (tasks.hasPrev) {
        paginationRow.push({ text: '‚¨ÖÔ∏è', callback_data: `task_page:${taskType}:${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${tasks.totalPages}`, callback_data: 'noop' });
      if (tasks.hasNext) {
        paginationRow.push({ text: '‚û°Ô∏è', callback_data: `task_page:${taskType}:${page + 1}` });
      }
      keyboard.push(paginationRow);
    }

    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—Ä–∞–±–æ—Ç–∫—É', callback_data: 'menu:earn' }]);

    await ctx.editMessageText(text, {
      reply_markup: { inline_keyboard: keyboard },
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Show tasks by type error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è
const showTaskDetails = async (ctx: BotContext, taskId: string) => {
  try {
    const task = await taskService.getTaskDetails(taskId, ctx.user.telegramId);
    const userLevel = ctx.user.level;
    const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);

    const taskIcon = getTaskTypeIcon(task.type);
    const timeLeft = task.expiresAt ? formatTimeLeft(task.expiresAt) : '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π';

    let text = `${taskIcon} <b>–ó–ê–î–ê–ù–ò–ï: ${task.title}</b>\n\n`;
    text += `üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${task.description}\n\n`;
    text += `üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> ${finalReward} GRAM\n`;
    text += `‚è±Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> ${timeLeft}\n`;
    text += `üë• <b>–í—ã–ø–æ–ª–Ω–∏–ª–∏:</b> ${task.completedCount}/${task.targetCount}\n`;
    text += `üë§ <b>–ê–≤—Ç–æ—Ä:</b> @${task.author?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n\n`;

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    text += getTaskInstructions(task.type, task.targetUrl);

    const keyboard = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    if (task.executions && task.executions.length > 0) {
      const execution = task.executions[0];
      if (execution.status === ExecutionStatus.pending) {
        text += `\n‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏`;
        keyboard.push([{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `task_check:${taskId}` }]);
      } else if (execution.status === ExecutionStatus.approved) {
        text += `\n‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –æ–¥–æ–±—Ä–µ–Ω–æ`;
        text += `\nüí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${execution.rewardAmount} GRAM`;
      } else if (execution.status === ExecutionStatus.rejected) {
        text += `\n‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª–æ–Ω–µ–Ω–æ`;
        if (execution.adminComment) {
          text += `\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: ${execution.adminComment}`;
        }
        if (canAppeal(execution)) {
          keyboard.push([{ text: 'üìù –ü–æ–¥–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é', callback_data: `appeal:${execution.id}` }]);
        }
      }
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
      keyboard.push([{ text: 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: `task_execute:${taskId}` }]);
    }

    keyboard.push([{ text: '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', callback_data: `task_info:${taskId}` }]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: `task_type:${task.type}` }]);

    await ctx.editMessageText(text, {
      reply_markup: { inline_keyboard: keyboard },
      parse_mode: 'HTML'
    });

  } catch (error) {
    console.error('Show task details error:', error);
    await ctx.answerCallbackQuery(`‚ùå ${error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'}`);
  }
};

// Helper —Ñ—É–Ω–∫—Ü–∏–∏
const getMultiplier = (level: string): number => {
  const multipliers = { bronze: 1.0, silver: 1.2, gold: 1.35, premium: 1.5 };
  return multipliers[level as keyof typeof multipliers] || 1.0;
};

const getLevelEmoji = (level: string): string => {
  const emojis = { bronze: 'ü•â', silver: 'ü•à', gold: 'ü•á', premium: 'üíé' };
  return emojis[level as keyof typeof emojis] || 'ü•â';
};

const getNextLevel = (currentLevel: string): string => {
  const levels = { bronze: 'Silver', silver: 'Gold', gold: 'Premium', premium: 'MAX' };
  return levels[currentLevel as keyof typeof levels] || 'Unknown';
};

const getTaskTypeName = (type: TaskType): string => {
  const names = {
    [TaskType.subscribe]: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã',
    [TaskType.join_group]: '–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã', 
    [TaskType.view_post]: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤',
    [TaskType.react_post]: '–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã',
    [TaskType.use_bot]: '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤',
    [TaskType.premium_boost]: '–ü—Ä–µ–º–∏—É–º –±—É—Å—Ç'
  };
  return names[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

const getTaskTypeIcon = (type: TaskType): string => {
  return TASK_TYPE_CONFIG[type]?.icon || 'üìã';
};

const getExecutionStatusEmoji = (status: ExecutionStatus): string => {
  const emojis = {
    [ExecutionStatus.pending]: '‚è≥',
    [ExecutionStatus.approved]: '‚úÖ',
    [ExecutionStatus.rejected]: '‚ùå',
    [ExecutionStatus.expired]: '‚è∞'
  };
  return emojis[status] || '‚ùì';
};

const formatDate = (date: Date): string => {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const formatTimeLeft = (expiresAt: Date): string => {
  const now = new Date();
  const diff = expiresAt.getTime() - now.getTime();
  
  if (diff <= 0) return '–ò—Å—Ç–µ–∫–ª–æ';
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  if (days > 0) return `${days} –¥–Ω. ${hours} —á.`;
  return `${hours} —á.`;
};

const formatBoostedTask = (task: any, userLevel: string): string => {
  const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);
  return `‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë ‚≠ê üöÄ ${task.title.substring(0, 20)}${task.title.length > 20 ? '...' : ''}\n‚ïë üí∞ ${finalReward} GRAM ‚Ä¢ üë• ${task.completedCount}/${task.targetCount}\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n`;
};

const formatRegularTask = (task: any, userLevel: string): string => {
  const finalReward = applyMultiplier(task.reward.toNumber(), userLevel);
  return `‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}\n‚îÇ üí∞ ${finalReward} GRAM\n‚îÇ üë• ${task.completedCount}/${task.targetCount}\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n`;
};

const getTaskInstructions = (type: TaskType, targetUrl?: string): string => {
  const instructions = {
    [TaskType.subscribe]: 'üì∫ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.join_group]: 'üë• –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.view_post]: 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.react_post]: 'üëç –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
    [TaskType.use_bot]: 'ü§ñ –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç',
    [TaskType.premium_boost]: '‚≠ê –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ'
  };
  
  let text = 'üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>\n';
  text += instructions[type] || '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é';
  
  if (targetUrl) {
    text += `\n\nüîó <b>–°—Å—ã–ª–∫–∞:</b> ${targetUrl}`;
  }
  
  return text;
};

const canAppeal = (execution: any): boolean => {
  if (!execution.verifiedAt) return false;
  const hoursSinceRejection = (Date.now() - execution.verifiedAt.getTime()) / (1000 * 60 * 60);
  return hoursSinceRejection < 24;
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
const getTaskCounts = async () => {
  try {
    const [total, subscribeTasks, joinGroupTasks, viewPostTasks, useBotTasks, reactPostTasks, premiumBoostTasks] = await Promise.all([
      prisma.task.count({
        where: {
          status: TaskStatus.active,
          expiresAt: {
            OR: [
              { equals: null },
              { gt: new Date() }
            ]
          }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.subscribe,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.join_group,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.view_post,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.use_bot,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.react_post,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      }),
      prisma.task.count({
        where: {
          type: TaskType.premium_boost,
          status: TaskStatus.active,
          expiresAt: { OR: [{ equals: null }, { gt: new Date() }] }
        }
      })
    ]);

    return {
      total,
      subscribe: subscribeTasks,
      join_group: joinGroupTasks,
      view_post: viewPostTasks,
      use_bot: useBotTasks,
      react_post: reactPostTasks,
      premium_boost: premiumBoostTasks
    };
  } catch (error) {
    console.error('Get task counts error:', error);
    return {
      total: 0,
      subscribe: 0,
      join_group: 0,
      view_post: 0,
      use_bot: 0,
      react_post: 0,
      premium_boost: 0
    };
  }
};

const getUserEarningStats = async (userId: number) => {
  try {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

    const [
      todayStats, weekStats, monthStats, 
      bestTypeStats, approvalStats, avgRewardStats
    ] = await Promise.all([
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      Promise.all([
        prisma.taskExecution.count({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: today }
          }
        }),
        prisma.taskExecution.aggregate({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: today }
          },
          _sum: { rewardAmount: true }
        }),
        prisma.taskExecution.count({
          where: { 
            userId, 
            status: ExecutionStatus.pending,
            createdAt: { gte: today }
          }
        })
      ]),

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
      Promise.all([
        prisma.taskExecution.count({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: weekAgo }
          }
        }),
        prisma.taskExecution.aggregate({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: weekAgo }
          },
          _sum: { rewardAmount: true }
        })
      ]),

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
      Promise.all([
        prisma.taskExecution.count({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: monthAgo }
          }
        }),
        prisma.taskExecution.aggregate({
          where: { 
            userId, 
            status: ExecutionStatus.approved,
            verifiedAt: { gte: monthAgo }
          },
          _sum: { rewardAmount: true }
        })
      ]),

      // –õ—É—á—à–∏–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π
      prisma.taskExecution.groupBy({
        by: ['task'],
        where: { 
          userId, 
          status: ExecutionStatus.approved 
        },
        _count: { id: true },
        orderBy: { _count: { id: 'desc' } },
        take: 1
      }),

      // –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
      Promise.all([
        prisma.taskExecution.count({ where: { userId } }),
        prisma.taskExecution.count({ 
          where: { userId, status: ExecutionStatus.approved } 
        })
      ]),

      // –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞
      prisma.taskExecution.aggregate({
        where: { userId, status: ExecutionStatus.approved },
        _avg: { rewardAmount: true }
      })
    ]);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–µ–º —Ç–∏–ø–µ –∑–∞–¥–∞–Ω–∏—è
    let bestType = { name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', count: 0 };
    if (bestTypeStats.length > 0) {
      const taskInfo = await prisma.task.findUnique({
        where: { id: bestTypeStats[0].task },
        select: { type: true }
      });
      if (taskInfo) {
        bestType = {
          name: getTaskTypeName(taskInfo.type),
          count: bestTypeStats[0]._count.id
        };
      }
    }

    const totalExecutions = approvalStats[0];
    const approvedExecutions = approvalStats[1];
    const approvalRate = totalExecutions > 0 ? Math.round((approvedExecutions / totalExecutions) * 100) : 0;

    return {
      today: {
        completed: todayStats[0],
        earned: todayStats[1]._sum.rewardAmount?.toNumber() || 0,
        pending: todayStats[2]
      },
      week: {
        completed: weekStats[0],
        earned: weekStats[1]._sum.rewardAmount?.toNumber() || 0
      },
      month: {
        completed: monthStats[0],
        earned: monthStats[1]._sum.rewardAmount?.toNumber() || 0
      },
      bestType,
      approvalRate,
      averageReward: Math.round(avgRewardStats._avg.rewardAmount?.toNumber() || 0),
      averageTime: 25, // –ó–∞–≥–ª—É—à–∫–∞
      rating: 4.3 // –ó–∞–≥–ª—É—à–∫–∞
    };
  } catch (error) {
    console.error('Get user earning stats error:', error);
    return {
      today: { completed: 0, earned: 0, pending: 0 },
      week: { completed: 0, earned: 0 },
      month: { completed: 0, earned: 0 },
      bestType: { name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', count: 0 },
      approvalRate: 0,
      averageReward: 0,
      averageTime: 0,
      rating: 0
    };
  }
};

const getUserExecutions = async (userId: number, page: number = 1, limit: number = 10) => {
  try {
    const skip = (page - 1) * limit;
    
    const [executions, total] = await Promise.all([
      prisma.taskExecution.findMany({
        where: { userId },
        include: {
          task: {
            select: {
              title: true,
              type: true,
              reward: true
            }
          }
        },
        orderBy: { createdAt: 'desc' },
        skip,
        take: limit
      }),
      prisma.taskExecution.count({
        where: { userId }
      })
    ]);

    return {
      executions,
      total,
      page,
      totalPages: Math.ceil(total / limit),
      hasNext: page * limit < total,
      hasPrev: page > 1
    };
  } catch (error) {
    console.error('Get user executions error:', error);
    return {
      executions: [],
      total: 0,
      page: 1,
      totalPages: 1,
      hasNext: false,
      hasPrev: false
    };
  }
};

// Callback handler –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
const handleExecutionsCallback = async (ctx: BotContext, data: string) => {
  const action = data.replace('executions:', '');
  
  if (action.startsWith('page:')) {
    const page = parseInt(action.replace('page:', ''));
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const executions = await getUserExecutions(ctx.user.telegramId, page, 10);
    // ... (–∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –≤—ã—à–µ)
    await ctx.answerCallbackQuery();
  } else {
    await ctx.answerCallbackQuery('üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  }
};