import { Menu } from '@grammyjs/menu';
import { prisma, TaskStatus, ExecutionStatus, UserLevel } from '@pr-gram/database';
import { adminOnlyMiddleware, superAdminOnlyMiddleware } from '../middleware/auth';
import type { BotContext } from '../types/context';

// –ê–¥–º–∏–Ω –º–µ–Ω—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
export const adminMenu = new Menu<BotContext>('admin')
  .text('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
    try {
      const stats = await getSystemStatistics();
      
      const statsText = `
üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>
‚îú –í—Å–µ–≥–æ: ${stats.users.total}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): ${stats.users.active}
‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.users.newToday}
‚îú Premium: ${stats.users.premium}
‚îî –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å: ${stats.users.online}

üéØ <b>–ó–ê–î–ê–ù–ò–Ø:</b>
‚îú –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${stats.tasks.total}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.tasks.active}
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.tasks.executionsToday}
‚îú –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${stats.tasks.pendingModeration}
‚îî –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.tasks.successRate}%

üí∞ <b>–≠–ö–û–ù–û–ú–ò–ö–ê:</b>
‚îú –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: ${stats.economy.totalVolume} GRAM
‚îú –ö–æ–º–∏—Å—Å–∏–∏ —Å–µ–≥–æ–¥–Ω—è: ${stats.economy.commissionsToday} GRAM
‚îú –í—ã–ø–ª–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.economy.payoutsToday} GRAM
‚îú –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats.economy.averageTask} GRAM
‚îî –ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã: ${stats.economy.systemBalance} GRAM

‚úÖ <b>–ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò:</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${stats.subscriptions.active}
‚îú –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ${stats.subscriptions.checksToday}
‚îú –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${stats.subscriptions.successRate}%
‚îî –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.subscriptions.deletedMessages}

üí≥ <b>–ß–ï–ö–ò:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.checks.createdToday}
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${stats.checks.activatedToday}
‚îú –°—É–º–º–∞ —á–µ–∫–æ–≤: ${stats.checks.totalAmount} GRAM
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.checks.conversionRate}%

üîß <b>–°–ò–°–¢–ï–ú–ê:</b>
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.system.uptime}
‚îú –ù–∞–≥—Ä—É–∑–∫–∞: ${stats.system.load}%
‚îú –ü–∞–º—è—Ç—å: ${stats.system.memory}%
‚îî –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.system.dbStatus}
`;

      await ctx.editMessageText(statsText, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin:stats' }],
            [{ text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin:analytics' }],
            [{ text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'admin:export' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
          ]
        },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show admin stats error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin:main' }]] } }
      );
    }
  }).row()
  
  .text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', async (ctx) => {
    const userManagementText = `
üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;

    await ctx.editMessageText(userManagementText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin:user_search' }],
          [{ text: 'üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:top_users' }],
          [{ text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'admin:banned_users' }],
          [{ text: 'üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:premium_users' }],
          [{ text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º', callback_data: 'admin:level_analytics' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
        ]
      },
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('üéØ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π', async (ctx) => {
    try {
      const pendingTasks = await getPendingModerationTasks();
      
      if (pendingTasks.length === 0) {
        await ctx.editMessageText(
          'üéØ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏', callback_data: 'admin:moderation_history' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
              ]
            }
          }
        );
        return;
      }

      let moderationText = `üéØ <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô</b>\n\n‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${pendingTasks.length}\n\n`;
      
      pendingTasks.slice(0, 5).forEach((execution, index) => {
        const task = execution.task;
        const user = execution.user;
        
        moderationText += `${index + 1}. <b>${task.title}</b>\n`;
        moderationText += `   üë§ ${user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
        moderationText += `   üí∞ ${execution.rewardAmount} GRAM\n`;
        moderationText += `   üìÖ ${formatDateTime(execution.createdAt)}\n\n`;
      });

      const keyboard = [];
      
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      pendingTasks.slice(0, 5).forEach((execution, index) => {
        keyboard.push([
          { text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #${index + 1}`, callback_data: `admin:approve:${execution.id}` },
          { text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #${index + 1}`, callback_data: `admin:reject:${execution.id}` }
        ]);
      });

      if (pendingTasks.length > 5) {
        keyboard.push([{ text: `üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${pendingTasks.length})`, callback_data: 'admin:all_pending' }]);
      }

      keyboard.push([
        { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ', callback_data: 'admin:approve_all' },
        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ', callback_data: 'admin:reject_all' }
      ]);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]);

      await ctx.editMessageText(moderationText, {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show moderation tasks error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin:main' }]] } }
      );
    }
  }).row()
  
  .text('üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏', async (ctx) => {
    try {
      const checksStats = await getChecksStatistics();
      
      const checksText = `
üí≥ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–ê–ú–ò</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${checksStats.total}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${checksStats.active}
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${checksStats.activatedToday}
‚îú –û–±—â–∞—è —Å—É–º–º–∞: ${checksStats.totalAmount} GRAM
‚îî –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ —á–µ–∫–∞: ${checksStats.averageAmount} GRAM

üèÜ <b>–¢–û–ü –°–û–ó–î–ê–¢–ï–õ–ò –ß–ï–ö–û–í:</b>
${checksStats.topCreators.map((creator, i) => 
  `${i + 1}. ${creator.name} - ${creator.amount} GRAM`
).join('\n')}

‚ö†Ô∏è <b>–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
‚îú –°–ø–∞–º —á–µ–∫–∏: ${checksStats.suspicious.spam}
‚îú –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã: ${checksStats.suspicious.largeSums}
‚îî –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${checksStats.suspicious.needReview}
`;

      await ctx.editMessageText(checksText, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –ü–æ–∏—Å–∫ —á–µ–∫–∞', callback_data: 'admin:check_search' }],
            [{ text: '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ–∫–∏', callback_data: 'admin:suspicious_checks' }],
            [{ text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:checks_analytics' }],
            [{ text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫', callback_data: 'admin:block_check' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
          ]
        },
        parse_mode: 'HTML'
      });
    } catch (error) {
      console.error('Show checks management error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: { inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin:main' }]] } }
      );
    }
  }).row()
  
  .text('‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
    const settingsText = `
‚öôÔ∏è <b>–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò</b>

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
`;

    await ctx.editMessageText(settingsText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: 'admin:economy_settings' }],
          [{ text: 'üéØ –õ–∏–º–∏—Ç—ã –∑–∞–¥–∞–Ω–∏–π', callback_data: 'admin:task_limits' }],
          [{ text: 'üö´ –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin:antispam_settings' }],
          [{ text: 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', callback_data: 'admin:maintenance' }],
          [{ text: 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'admin:broadcast' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
        ]
      },
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã', async (ctx) => {
    const analyticsText = `
üìà <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´</b>

–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
`;

    await ctx.editMessageText(analyticsText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –î–∞—à–±–æ—Ä–¥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏', callback_data: 'admin:realtime_dashboard' }],
          [{ text: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã', callback_data: 'admin:financial_reports' }],
          [{ text: 'üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin:user_analytics' }],
          [{ text: 'üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π', callback_data: 'admin:task_analytics' }],
          [{ text: 'üìß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã', callback_data: 'admin:auto_reports' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
        ]
      },
      parse_mode: 'HTML'
    });
  }).row()
  
  .text('üîí –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
    if (!ctx.isSuperAdmin) {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    const superAdminText = `
üîí <b>–°–£–ü–ï–† –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>

‚ö†Ô∏è <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
`;

    await ctx.editMessageText(superAdminText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏', callback_data: 'superadmin:manage_admins' }],
          [{ text: 'üóÑÔ∏è –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î', callback_data: 'superadmin:backup_db' }],
          [{ text: 'üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã', callback_data: 'superadmin:system_commands' }],
          [{ text: 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', callback_data: 'superadmin:manage_balances' }],
          [{ text: 'üö´ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', callback_data: 'superadmin:global_bans' }],
          [{ text: 'üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏', callback_data: 'superadmin:system_logs' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:main' }]
        ]
      },
      parse_mode: 'HTML'
    });
  }).row()
  
  .back('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
adminMenu.register(async (ctx) => {
  const data = ctx.callbackQuery?.data;
  
  if (data?.startsWith('admin:')) {
    await handleAdminCallback(ctx, data);
    return;
  }
  
  if (data?.startsWith('superadmin:')) {
    if (!ctx.isSuperAdmin) {
      await ctx.answerCallbackQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }
    await handleSuperAdminCallback(ctx, data);
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –∞–¥–º–∏–Ω –º–µ–Ω—é
  const adminText = `
üëë <b>–ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–ï</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

üîë <b>–í–∞—à–∏ –ø—Ä–∞–≤–∞:</b>
${ctx.isSuperAdmin ? '‚Ä¢ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)' : '‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
${ctx.isAdmin ? '‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞' : ''}
${ctx.isAdmin ? '‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏' : ''}
${ctx.isSuperAdmin ? '‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : ''}

üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${await getOnlineUsersCount()}
‚Ä¢ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${await getPendingTasksCount()}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${await getActiveSubscriptionChecksCount()}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
`;

  if (ctx.callbackQuery) {
    await ctx.editMessageText(adminText, {
      reply_markup: adminMenu,
      parse_mode: 'HTML'
    });
    await ctx.answerCallbackQuery();
  }
});

// Helper —Ñ—É–Ω–∫—Ü–∏–∏
const formatDateTime = (date: Date): string => {
  return date.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
const getSystemStatistics = async () => {
  try {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);

    const [
      totalUsers, activeUsers, newUsersToday, premiumUsers,
      totalTasks, activeTasks, executionsToday, pendingModeration,
      totalVolume, commissionsToday, payoutsToday,
      activeSubscriptions, checksToday, subscriptionChecksToday,
      checksCreatedToday, checksActivatedToday
    ] = await Promise.all([
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      prisma.user.count(),
      prisma.user.count({
        where: { updatedAt: { gte: weekAgo } }
      }),
      prisma.user.count({
        where: { createdAt: { gte: today } }
      }),
      prisma.user.count({
        where: { isPremium: true }
      }),

      // –ó–∞–¥–∞–Ω–∏—è
      prisma.task.count(),
      prisma.task.count({
        where: { status: TaskStatus.active }
      }),
      prisma.taskExecution.count({
        where: { createdAt: { gte: today } }
      }),
      prisma.taskExecution.count({
        where: { status: ExecutionStatus.pending }
      }),

      // –≠–∫–æ–Ω–æ–º–∏–∫–∞
      prisma.transaction.aggregate({
        _sum: { amount: true }
      }),
      prisma.transaction.aggregate({
        where: {
          createdAt: { gte: today },
          description: { contains: '–∫–æ–º–∏—Å—Å–∏—è' }
        },
        _sum: { amount: true }
      }),
      prisma.transaction.aggregate({
        where: {
          createdAt: { gte: today },
          type: 'earn'
        },
        _sum: { amount: true }
      }),

      // –ü–æ–¥–ø–∏—Å–∫–∏
      prisma.subscriptionCheck.count({
        where: { isActive: true }
      }),
      prisma.check.count({
        where: { createdAt: { gte: today } }
      }),
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
      Promise.resolve(0),

      // –ß–µ–∫–∏
      prisma.check.count({
        where: { createdAt: { gte: today } }
      }),
      prisma.checkActivation.count({
        where: { activatedAt: { gte: today } }
      })
    ]);

    // –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π
    const totalExecutions = await prisma.taskExecution.count();
    const successfulExecutions = await prisma.taskExecution.count({
      where: { status: ExecutionStatus.approved }
    });
    const successRate = totalExecutions > 0 ? 
      Math.round((successfulExecutions / totalExecutions) * 100) : 0;

    // –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    const avgTaskResult = await prisma.task.aggregate({
      _avg: { reward: true }
    });
    const averageTask = Math.round(avgTaskResult._avg.reward?.toNumber() || 0);

    return {
      users: {
        total: totalUsers,
        active: activeUsers,
        newToday: newUsersToday,
        premium: premiumUsers,
        online: Math.floor(activeUsers * 0.1) // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      },
      tasks: {
        total: totalTasks,
        active: activeTasks,
        executionsToday,
        pendingModeration,
        successRate
      },
      economy: {
        totalVolume: Math.round(totalVolume._sum.amount?.toNumber() || 0),
        commissionsToday: Math.round(commissionsToday._sum.amount?.toNumber() || 0),
        payoutsToday: Math.round(payoutsToday._sum.amount?.toNumber() || 0),
        averageTask,
        systemBalance: 1000000 // –ó–∞–≥–ª—É—à–∫–∞
      },
      subscriptions: {
        active: activeSubscriptions,
        checksToday: subscriptionChecksToday,
        successRate: 85, // –ó–∞–≥–ª—É—à–∫–∞
        deletedMessages: subscriptionChecksToday * 2 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      },
      checks: {
        createdToday: checksCreatedToday,
        activatedToday: checksActivatedToday,
        totalAmount: checksCreatedToday * 1000, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        conversionRate: checksCreatedToday > 0 ? 
          Math.round((checksActivatedToday / checksCreatedToday) * 100) : 0
      },
      system: {
        uptime: '5 –¥–Ω–µ–π 12 —á–∞—Å–æ–≤',
        load: Math.floor(Math.random() * 30 + 20),
        memory: Math.floor(Math.random() * 40 + 30),
        dbStatus: '‚úÖ –ù–æ—Ä–º–∞'
      }
    };
  } catch (error) {
    console.error('Get system statistics error:', error);
    throw error;
  }
};

const getPendingModerationTasks = async () => {
  try {
    return await prisma.taskExecution.findMany({
      where: { status: ExecutionStatus.pending },
      include: {
        task: {
          select: {
            title: true,
            type: true,
            reward: true
          }
        },
        user: {
          select: {
            telegramId: true,
            username: true,
            firstName: true
          }
        }
      },
      orderBy: { createdAt: 'asc' },
      take: 20
    });
  } catch (error) {
    console.error('Get pending moderation tasks error:', error);
    return [];
  }
};

const getChecksStatistics = async () => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const [
      total, active, activatedToday, totalAmountResult, avgAmountResult,
      topCreators, suspiciousChecks
    ] = await Promise.all([
      prisma.check.count(),
      prisma.check.count({ where: { isActive: true } }),
      prisma.checkActivation.count({
        where: { activatedAt: { gte: today } }
      }),
      prisma.check.aggregate({ _sum: { amount: true } }),
      prisma.check.aggregate({ _avg: { amount: true } }),
      
      // –¢–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª–∏ —á–µ–∫–æ–≤
      prisma.check.groupBy({
        by: ['createdBy'],
        _sum: { amount: true },
        _count: { id: true },
        orderBy: { _sum: { amount: 'desc' } },
        take: 5
      }),
      
      // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ–∫–∏ (–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã)
      prisma.check.count({
        where: { amount: { gte: 10000 } }
      })
    ]);

    const topCreatorsData = await Promise.all(
      topCreators.map(async (creator) => {
        const user = await prisma.user.findUnique({
          where: { telegramId: creator.createdBy },
          select: { username: true, firstName: true }
        });
        
        return {
          name: user?.username || user?.firstName || `ID: ${creator.createdBy}`,
          amount: creator._sum.amount?.toNumber() || 0
        };
      })
    );

    return {
      total,
      active,
      activatedToday,
      totalAmount: Math.round(totalAmountResult._sum.amount?.toNumber() || 0),
      averageAmount: Math.round(avgAmountResult._avg.amount?.toNumber() || 0),
      topCreators: topCreatorsData,
      suspicious: {
        spam: 0, // –ó–∞–≥–ª—É—à–∫–∞
        largeSums: suspiciousChecks,
        needReview: suspiciousChecks
      }
    };
  } catch (error) {
    console.error('Get checks statistics error:', error);
    throw error;
  }
};

const getOnlineUsersCount = async (): Promise<number> => {
  try {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
    return await prisma.user.count({
      where: { updatedAt: { gte: fiveMinutesAgo } }
    });
  } catch (error) {
    console.error('Get online users count error:', error);
    return 0;
  }
};

const getPendingTasksCount = async (): Promise<number> => {
  try {
    return await prisma.taskExecution.count({
      where: { status: ExecutionStatus.pending }
    });
  } catch (error) {
    console.error('Get pending tasks count error:', error);
    return 0;
  }
};

const getActiveSubscriptionChecksCount = async (): Promise<number> => {
  try {
    return await prisma.subscriptionCheck.count({
      where: { isActive: true }
    });
  } catch (error) {
    console.error('Get active subscription checks count error:', error);
    return 0;
  }
};

// Callback handlers (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
const handleAdminCallback = async (ctx: BotContext, data: string) => {
  const action = data.replace('admin:', '');
  
  switch (action) {
    case 'stats':
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await getSystemStatistics();
      await ctx.answerCallbackQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      break;
      
    case 'approve_all':
      await handleApproveAll(ctx);
      break;
      
    case 'reject_all':
      await handleRejectAll(ctx);
      break;
      
    default:
      if (action.startsWith('approve:')) {
        const executionId = action.replace('approve:', '');
        await handleApproveExecution(ctx, executionId);
      } else if (action.startsWith('reject:')) {
        const executionId = action.replace('reject:', '');
        await handleRejectExecution(ctx, executionId);
      } else {
        await ctx.answerCallbackQuery('üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      }
      break;
  }
};

const handleSuperAdminCallback = async (ctx: BotContext, data: string) => {
  const action = data.replace('superadmin:', '');
  
  switch (action) {
    case 'manage_admins':
      await showAdminManagement(ctx);
      break;
      
    case 'backup_db':
      await initiateDatabaseBackup(ctx);
      break;
      
    case 'system_commands':
      await showSystemCommands(ctx);
      break;
      
    default:
      await ctx.answerCallbackQuery('üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
      break;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
const handleApproveExecution = async (ctx: BotContext, executionId: string) => {
  try {
    const execution = await prisma.taskExecution.findUnique({
      where: { id: executionId },
      include: {
        task: true,
        user: true
      }
    });

    if (!execution) {
      await ctx.answerCallbackQuery('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –û–¥–æ–±—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    await prisma.taskExecution.update({
      where: { id: executionId },
      data: {
        status: ExecutionStatus.approved,
        verifiedAt: new Date(),
        verifiedBy: ctx.user.telegramId,
        adminComment: '–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
      }
    });

    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await prisma.user.update({
      where: { telegramId: execution.userId },
      data: {
        balance: { increment: execution.rewardAmount },
        tasksCompleted: { increment: 1 }
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await prisma.transaction.create({
      data: {
        userId: execution.userId,
        type: 'earn',
        amount: execution.rewardAmount,
        description: `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ${execution.task.title}`,
        metadata: {
          taskId: execution.task.id,
          executionId: execution.id,
          approvedBy: ctx.user.telegramId
        }
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è
    await prisma.task.update({
      where: { id: execution.task.id },
      data: {
        completedCount: { increment: 1 }
      }
    });

    await ctx.answerCallbackQuery(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª ${execution.rewardAmount} GRAM`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await ctx.editMessageText('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π...', { reply_markup: undefined });
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
    
  } catch (error) {
    console.error('Approve execution error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  }
};

const handleRejectExecution = async (ctx: BotContext, executionId: string) => {
  try {
    const execution = await prisma.taskExecution.findUnique({
      where: { id: executionId },
      include: {
        task: true,
        user: true
      }
    });

    if (!execution) {
      await ctx.answerCallbackQuery('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    await prisma.taskExecution.update({
      where: { id: executionId },
      data: {
        status: ExecutionStatus.rejected,
        verifiedAt: new Date(),
        verifiedBy: ctx.user.telegramId,
        adminComment: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
      }
    });

    await ctx.answerCallbackQuery(`‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await ctx.editMessageText('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π...', { reply_markup: undefined });
    
  } catch (error) {
    console.error('Reject execution error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
  }
};

const handleApproveAll = async (ctx: BotContext) => {
  try {
    const pendingExecutions = await prisma.taskExecution.findMany({
      where: { status: ExecutionStatus.pending },
      include: { task: true }
    });

    if (pendingExecutions.length === 0) {
      await ctx.answerCallbackQuery('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è');
      return;
    }

    // –û–¥–æ–±—Ä—è–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const executionIds = pendingExecutions.map(e => e.id);
    
    await prisma.taskExecution.updateMany({
      where: { id: { in: executionIds } },
      data: {
        status: ExecutionStatus.approved,
        verifiedAt: new Date(),
        verifiedBy: ctx.user.telegramId,
        adminComment: '–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
      }
    });

    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    for (const execution of pendingExecutions) {
      await prisma.user.update({
        where: { telegramId: execution.userId },
        data: {
          balance: { increment: execution.rewardAmount },
          tasksCompleted: { increment: 1 }
        }
      });

      await prisma.transaction.create({
        data: {
          userId: execution.userId,
          type: 'earn',
          amount: execution.rewardAmount,
          description: `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ${execution.task.title}`,
          metadata: {
            taskId: execution.task.id,
            executionId: execution.id,
            approvedBy: ctx.user.telegramId,
            massApproval: true
          }
        }
      });

      await prisma.task.update({
        where: { id: execution.task.id },
        data: {
          completedCount: { increment: 1 }
        }
      });
    }

    await ctx.answerCallbackQuery(`‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ ${pendingExecutions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π`);
    await ctx.editMessageText('‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω—ã!', { reply_markup: undefined });
    
  } catch (error) {
    console.error('Approve all error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏');
  }
};

const handleRejectAll = async (ctx: BotContext) => {
  try {
    const pendingExecutions = await prisma.taskExecution.findMany({
      where: { status: ExecutionStatus.pending }
    });

    if (pendingExecutions.length === 0) {
      await ctx.answerCallbackQuery('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
      return;
    }

    // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const executionIds = pendingExecutions.map(e => e.id);
    
    await prisma.taskExecution.updateMany({
      where: { id: { in: executionIds } },
      data: {
        status: ExecutionStatus.rejected,
        verifiedAt: new Date(),
        verifiedBy: ctx.user.telegramId,
        adminComment: '–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
      }
    });

    await ctx.answerCallbackQuery(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ${pendingExecutions.length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π`);
    await ctx.editMessageText('‚ùå –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã!', { reply_markup: undefined });
    
  } catch (error) {
    console.error('Reject all error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
  }
};

// –°—É–ø–µ—Ä –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
const showAdminManagement = async (ctx: BotContext) => {
  try {
    const admins = await prisma.user.findMany({
      where: {
        role: { in: ['admin', 'super_admin'] }
      },
      select: {
        telegramId: true,
        username: true,
        firstName: true,
        role: true,
        createdAt: true
      }
    });

    let adminText = `üëë <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò</b>\n\nüìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins.length}\n\n`;
    
    admins.forEach((admin, index) => {
      const roleEmoji = admin.role === 'super_admin' ? 'üëë' : 'üõ°Ô∏è';
      const name = admin.username || admin.firstName || `ID: ${admin.telegramId}`;
      
      adminText += `${roleEmoji} <b>${name}</b>\n`;
      adminText += `   ID: <code>${admin.telegramId}</code>\n`;
      adminText += `   –†–æ–ª—å: ${admin.role === 'super_admin' ? '–°—É–ø–µ—Ä –∞–¥–º–∏–Ω' : '–ê–¥–º–∏–Ω'}\n`;
      adminText += `   –ù–∞–∑–Ω–∞—á–µ–Ω: ${formatDateTime(admin.createdAt)}\n\n`;
    });

    await ctx.editMessageText(adminText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data: 'superadmin:add_admin' }],
          [{ text: '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data: 'superadmin:remove_admin' }],
          [{ text: 'üìä –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π', callback_data: 'superadmin:admin_logs' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:super_admin' }]
        ]
      },
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('Show admin management error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  }
};

const initiateDatabaseBackup = async (ctx: BotContext) => {
  try {
    await ctx.answerCallbackQuery('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    
    const backupText = `
üóÑÔ∏è <b>–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ë–î</b>

‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã:</b>
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${await prisma.user.count()}
‚îú –ó–∞–¥–∞–Ω–∏–π: ${await prisma.task.count()}
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${await prisma.taskExecution.count()}
‚îú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${await prisma.transaction.count()}
‚îú –ß–µ–∫–æ–≤: ${await prisma.check.count()}
‚îî –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: ${await prisma.subscriptionCheck.count()}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç

<i>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ ${new Date().toISOString()}</i>
`;

    await ctx.editMessageText(backupText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏', callback_data: 'superadmin:confirm_backup' }],
          [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ø–∏–π', callback_data: 'superadmin:backup_history' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin:super_admin' }]
        ]
      },
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('Initiate database backup error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
};

const showSystemCommands = async (ctx: BotContext) => {
  const commandsText = `
üîß <b>–°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´</b>

‚ö†Ô∏è <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
`;

  await ctx.editMessageText(commandsText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞', callback_data: 'superadmin:restart_bot' }],
        [{ text: 'üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤', callback_data: 'superadmin:clear_logs' }],
        [{ text: 'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', callback_data: 'superadmin:update_stats' }],
        [{ text: 'üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î', callback_data: 'superadmin:optimize_db' }],
        [{ text: 'üö® –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', callback_data: 'superadmin:maintenance_mode' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin:super_admin' }]
      ]
    },
    parse_mode: 'HTML'
  });
};