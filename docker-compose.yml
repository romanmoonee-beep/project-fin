version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: prgram_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: prgram_bot
      POSTGRES_USER: prgram_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-prgram_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prgram_user -d prgram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prgram_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: prgram_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - prgram_network

  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: docker/bot.Dockerfile
    container_name: prgram_bot
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql://prgram_user:${POSTGRES_PASSWORD:-prgram_password_change_me}@postgres:5432/prgram_bot
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BOT_ADMIN_IDS: ${BOT_ADMIN_IDS}
      BOT_SUPER_ADMIN_ID: ${BOT_SUPER_ADMIN_ID}
      WEBHOOK_ENABLED: ${WEBHOOK_ENABLED:-false}
      BOT_WEBHOOK_URL: ${BOT_WEBHOOK_URL}
      BOT_WEBHOOK_SECRET: ${BOT_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - prgram_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: prgram_api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      API_PORT: 3001
      DATABASE_URL: postgresql://prgram_user:${POSTGRES_PASSWORD:-prgram_password_change_me}@postgres:5432/prgram_bot
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      TELEGRAM_BOT_TOKEN: ${BOT_TOKEN}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      STARS_WEBHOOK_SECRET: ${STARS_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
    networks:
      - prgram_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Admin Panel
  web-admin:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    container_name: prgram_web_admin
    restart: unless-stopped
    environment:
      VITE_API_URL: ${API_URL:-http://localhost:3001}
      VITE_BOT_USERNAME: ${BOT_USERNAME}
    depends_on:
      - api
    ports:
      - "3000:3000"
    networks:
      - prgram_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: docker/bot.Dockerfile
    container_name: prgram_worker
    restart: unless-stopped
    command: ["pnpm", "worker:start"]
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://prgram_user:${POSTGRES_PASSWORD:-prgram_password_change_me}@postgres:5432/prgram_bot
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      BOT_TOKEN: ${BOT_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prgram_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: prgram_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - api
      - web-admin
    networks:
      - prgram_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prgram_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - prgram_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: prgram_grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - prgram_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  prgram_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16